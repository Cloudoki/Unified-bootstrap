/*!
 * Bootstrap v3.3.4 (http://getbootstrap.com)
 * Copyright 2011-2015 [object Object]
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(a){"use strict";var b=a.fn.jquery.split(" ")[0].split(".");if(b[0]<2&&b[1]<9||1==b[0]&&9==b[1]&&b[2]<1)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher")}(jQuery),+function(a){"use strict";function b(){var a=document.createElement("bootstrap"),b={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var c in b)if(void 0!==a.style[c])return{end:b[c]};return!1}a.fn.emulateTransitionEnd=function(b){var c=!1,d=this;a(this).one("bsTransitionEnd",function(){c=!0});var e=function(){c||a(d).trigger(a.support.transition.end)};return setTimeout(e,b),this},a(function(){a.support.transition=b(),a.support.transition&&(a.event.special.bsTransitionEnd={bindType:a.support.transition.end,delegateType:a.support.transition.end,handle:function(b){return a(b.target).is(this)?b.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),$(function(){"use strict";QUnit.module("alert plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).alert,"alert method is defined")}),QUnit.module("alert",{beforeEach:function(){$.fn.bootstrapAlert=$.fn.alert.noConflict()},afterEach:function(){$.fn.alert=$.fn.bootstrapAlert,delete $.fn.bootstrapAlert}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.alert,void 0,"alert was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapAlert();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should fade element out on clicking .close",function(a){a.expect(1);var b='<div class="alert alert-danger fade in"><a class="close" href="#" data-dismiss="alert">×</a><p><strong>Holy guacamole!</strong> Best check yo self, you\'re not looking too good.</p></div>',c=$(b).bootstrapAlert();c.find(".close").trigger("click"),a.strictEqual(c.hasClass("in"),!1,"remove .in class on .close click")}),QUnit.test("should remove element when clicking .close",function(a){a.expect(2);var b='<div class="alert alert-danger fade in"><a class="close" href="#" data-dismiss="alert">×</a><p><strong>Holy guacamole!</strong> Best check yo self, you\'re not looking too good.</p></div>',c=$(b).appendTo("#qunit-fixture").bootstrapAlert();a.notEqual($("#qunit-fixture").find(".alert").length,0,"element added to dom"),c.find(".close").trigger("click"),a.strictEqual($("#qunit-fixture").find(".alert").length,0,"element removed from dom")}),QUnit.test("should not fire closed when close is prevented",function(a){a.expect(1);var b=a.async();$('<div class="alert"/>').on("close.bs.alert",function(c){c.preventDefault(),a.ok(!0,"close event fired"),b()}).on("closed.bs.alert",function(){a.ok(!1,"closed event fired")}).bootstrapAlert("close")})}),$(function(){"use strict";QUnit.module("button plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).button,"button method is defined")}),QUnit.module("button",{beforeEach:function(){$.fn.bootstrapButton=$.fn.button.noConflict()},afterEach:function(){$.fn.button=$.fn.bootstrapButton,delete $.fn.bootstrapButton}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.button,void 0,"button was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapButton();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should return set state to loading",function(a){a.expect(4);var b=$('<button class="btn" data-loading-text="fat">mdo</button>');a.strictEqual(b.html(),"mdo","btn text equals mdo"),b.bootstrapButton("loading");var c=a.async();setTimeout(function(){a.strictEqual(b.html(),"fat","btn text equals fat"),a.ok(b[0].hasAttribute("disabled"),"btn is disabled"),a.ok(b.hasClass("disabled"),"btn has disabled class"),c()},0)}),QUnit.test("should return reset state",function(a){a.expect(7);var b=$('<button class="btn" data-loading-text="fat">mdo</button>');a.strictEqual(b.html(),"mdo","btn text equals mdo"),b.bootstrapButton("loading");var c=a.async();setTimeout(function(){a.strictEqual(b.html(),"fat","btn text equals fat"),a.ok(b[0].hasAttribute("disabled"),"btn is disabled"),a.ok(b.hasClass("disabled"),"btn has disabled class"),c();var d=a.async();b.bootstrapButton("reset"),setTimeout(function(){a.strictEqual(b.html(),"mdo","btn text equals mdo"),a.ok(!b[0].hasAttribute("disabled"),"btn is not disabled"),a.ok(!b.hasClass("disabled"),"btn does not have disabled class"),d()},0)},0)}),QUnit.test("should work with an empty string as reset state",function(a){a.expect(7);var b=$('<button class="btn" data-loading-text="fat"/>');a.strictEqual(b.html(),"",'btn text equals ""'),b.bootstrapButton("loading");var c=a.async();setTimeout(function(){a.strictEqual(b.html(),"fat","btn text equals fat"),a.ok(b[0].hasAttribute("disabled"),"btn is disabled"),a.ok(b.hasClass("disabled"),"btn has disabled class"),c();var d=a.async();b.bootstrapButton("reset"),setTimeout(function(){a.strictEqual(b.html(),"",'btn text equals ""'),a.ok(!b[0].hasAttribute("disabled"),"btn is not disabled"),a.ok(!b.hasClass("disabled"),"btn does not have disabled class"),d()},0)},0)}),QUnit.test("should toggle active",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button">mdo</button>');a.ok(!b.hasClass("active"),"btn does not have active class"),b.bootstrapButton("toggle"),a.ok(b.hasClass("active"),"btn has class active")}),QUnit.test("should toggle active when btn children are clicked",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button">mdo</button>'),c=$("<i/>");b.append(c).appendTo("#qunit-fixture"),a.ok(!b.hasClass("active"),"btn does not have active class"),c.trigger("click"),a.ok(b.hasClass("active"),"btn has class active")}),QUnit.test("should toggle aria-pressed",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>');a.strictEqual(b.attr("aria-pressed"),"false","btn aria-pressed state is false"),b.bootstrapButton("toggle"),a.strictEqual(b.attr("aria-pressed"),"true","btn aria-pressed state is true")}),QUnit.test("should toggle aria-pressed when btn children are clicked",function(a){a.expect(2);var b=$('<button class="btn" data-toggle="button" aria-pressed="false">redux</button>'),c=$("<i/>");b.append(c).appendTo("#qunit-fixture"),a.strictEqual(b.attr("aria-pressed"),"false","btn aria-pressed state is false"),c.trigger("click"),a.strictEqual(b.attr("aria-pressed"),"true","btn aria-pressed state is true")}),QUnit.test("should toggle active when btn children are clicked within btn-group",function(a){a.expect(2);var b=$('<div class="btn-group" data-toggle="buttons"/>'),c=$('<button class="btn">fat</button>'),d=$("<i/>");b.append(c.append(d)).appendTo("#qunit-fixture"),a.ok(!c.hasClass("active"),"btn does not have active class"),d.trigger("click"),a.ok(c.hasClass("active"),"btn has class active")}),QUnit.test("should check for closest matching toggle",function(a){a.expect(12);var b='<div class="btn-group" data-toggle="buttons"><label class="btn btn-primary active"><input type="radio" name="options" id="option1" checked="true"> Option 1</label><label class="btn btn-primary"><input type="radio" name="options" id="option2"> Option 2</label><label class="btn btn-primary"><input type="radio" name="options" id="option3"> Option 3</label></div>',c=$(b).appendTo("#qunit-fixture"),d=c.children().eq(0),e=c.children().eq(1);a.ok(d.hasClass("active"),"btn1 has active class"),a.ok(d.find("input").prop("checked"),"btn1 is checked"),a.ok(!e.hasClass("active"),"btn2 does not have active class"),a.ok(!e.find("input").prop("checked"),"btn2 is not checked"),e.find("input").trigger("click"),a.ok(!d.hasClass("active"),"btn1 does not have active class"),a.ok(!d.find("input").prop("checked"),"btn1 is checked"),a.ok(e.hasClass("active"),"btn2 has active class"),a.ok(e.find("input").prop("checked"),"btn2 is checked"),e.find("input").trigger("click"),a.ok(!d.hasClass("active"),"btn1 does not have active class"),a.ok(!d.find("input").prop("checked"),"btn1 is checked"),a.ok(e.hasClass("active"),"btn2 has active class"),a.ok(e.find("input").prop("checked"),"btn2 is checked")})}),$(function(){"use strict";QUnit.module("carousel plugin"),QUnit.test("should be defined on jQuery object",function(a){a.expect(1),a.ok($(document.body).carousel,"carousel method is defined")}),QUnit.module("carousel",{beforeEach:function(){$.fn.bootstrapCarousel=$.fn.carousel.noConflict()},afterEach:function(){$.fn.carousel=$.fn.bootstrapCarousel,delete $.fn.bootstrapCarousel}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.carousel,void 0,"carousel was set back to undefined (orig value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapCarousel();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should not fire slid when slide is prevented",function(a){a.expect(1);var b=a.async();$('<div class="carousel"/>').on("slide.bs.carousel",function(c){c.preventDefault(),a.ok(!0,"slide event fired"),b()}).on("slid.bs.carousel",function(){a.ok(!1,"slid event fired")}).bootstrapCarousel("next")}),QUnit.test("should reset when slide is prevented",function(a){a.expect(6);var b='<div id="carousel-example-generic" class="carousel slide"><ol class="carousel-indicators"><li data-target="#carousel-example-generic" data-slide-to="0" class="active"/><li data-target="#carousel-example-generic" data-slide-to="1"/><li data-target="#carousel-example-generic" data-slide-to="2"/></ol><div class="carousel-inner"><div class="item active"><div class="carousel-caption"/></div><div class="item"><div class="carousel-caption"/></div><div class="item"><div class="carousel-caption"/></div></div><a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"/><a class="right carousel-control" href="#carousel-example-generic" data-slide="next"/></div>',c=$(b),d=a.async();c.one("slide.bs.carousel",function(b){b.preventDefault(),setTimeout(function(){a.ok(c.find(".item:eq(0)").is(".active"),"first item still active"),a.ok(c.find(".carousel-indicators li:eq(0)").is(".active"),"first indicator still active"),c.bootstrapCarousel("next")},0)}).one("slid.bs.carousel",function(){setTimeout(function(){a.ok(!c.find(".item:eq(0)").is(".active"),"first item still active"),a.ok(!c.find(".carousel-indicators li:eq(0)").is(".active"),"first indicator still active"),a.ok(c.find(".item:eq(1)").is(".active"),"second item active"),a.ok(c.find(".carousel-indicators li:eq(1)").is(".active"),"second indicator active"),d()},0)}).bootstrapCarousel("next")}),QUnit.test("should fire slide event with direction",function(a){a.expect(4);var b='<div id="myCarousel" class="carousel slide"><div class="carousel-inner"><div class="item active"><img alt=""><div class="carousel-caption"><h4>First Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Second Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Third Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div></div><a class="left carousel-control" href="#myCarousel" data-slide="prev">&lsaquo;</a><a class="right carousel-control" href="#myCarousel" data-slide="next">&rsaquo;</a></div>',c=$(b),d=a.async();c.one("slide.bs.carousel",function(b){a.ok(b.direction,"direction present on next"),a.strictEqual(b.direction,"left","direction is left on next"),c.one("slide.bs.carousel",function(b){a.ok(b.direction,"direction present on prev"),a.strictEqual(b.direction,"right","direction is right on prev"),d()}).bootstrapCarousel("prev")}).bootstrapCarousel("next")}),QUnit.test("should fire slid event with direction",function(a){a.expect(4);var b='<div id="myCarousel" class="carousel slide"><div class="carousel-inner"><div class="item active"><img alt=""><div class="carousel-caption"><h4>First Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Second Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Third Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div></div><a class="left carousel-control" href="#myCarousel" data-slide="prev">&lsaquo;</a><a class="right carousel-control" href="#myCarousel" data-slide="next">&rsaquo;</a></div>',c=$(b),d=a.async();c.one("slid.bs.carousel",function(b){a.ok(b.direction,"direction present on next"),a.strictEqual(b.direction,"left","direction is left on next"),c.one("slid.bs.carousel",function(b){a.ok(b.direction,"direction present on prev"),a.strictEqual(b.direction,"right","direction is right on prev"),d()}).bootstrapCarousel("prev")}).bootstrapCarousel("next")}),QUnit.test("should fire slide event with relatedTarget",function(a){a.expect(2);var b='<div id="myCarousel" class="carousel slide"><div class="carousel-inner"><div class="item active"><img alt=""><div class="carousel-caption"><h4>First Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Second Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Third Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div></div><a class="left carousel-control" href="#myCarousel" data-slide="prev">&lsaquo;</a><a class="right carousel-control" href="#myCarousel" data-slide="next">&rsaquo;</a></div>',c=a.async();$(b).on("slide.bs.carousel",function(b){a.ok(b.relatedTarget,"relatedTarget present"),a.ok($(b.relatedTarget).hasClass("item"),'relatedTarget has class "item"'),c()}).bootstrapCarousel("next")}),QUnit.test("should fire slid event with relatedTarget",function(a){a.expect(2);var b='<div id="myCarousel" class="carousel slide"><div class="carousel-inner"><div class="item active"><img alt=""><div class="carousel-caption"><h4>First Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Second Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Third Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div></div><a class="left carousel-control" href="#myCarousel" data-slide="prev">&lsaquo;</a><a class="right carousel-control" href="#myCarousel" data-slide="next">&rsaquo;</a></div>',c=a.async();$(b).on("slid.bs.carousel",function(b){a.ok(b.relatedTarget,"relatedTarget present"),a.ok($(b.relatedTarget).hasClass("item"),'relatedTarget has class "item"'),c()}).bootstrapCarousel("next")}),QUnit.test("should set interval from data attribute",function(a){a.expect(4);var b='<div id="myCarousel" class="carousel slide"><div class="carousel-inner"><div class="item active"><img alt=""><div class="carousel-caption"><h4>First Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Second Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div><div class="item"><img alt=""><div class="carousel-caption"><h4>Third Thumbnail label</h4><p>Cras justo odio, dapibus ac facilisis in, egestas eget quam. Donec id elit non mi porta gravida at eget metus. Nullam id dolor id nibh ultricies vehicula ut id elit.</p></div></div></div><a class="left carousel-control" href="#myCarousel" data-slide="prev">&lsaquo;</a><a class="right carousel-control" href="#myCarousel" data-slide="next">&rsaquo;</a></div>',c=$(b);c.attr("data-interval",1814),c.appendTo("body"),$("[data-slide]").first().trigger("click"),a.strictEqual(c.data("bs.carousel").options.interval,1814),c.remove(),c.appendTo("body").attr("data-modal","foobar"),$("[data-slide]").first().trigger("click"),a.strictEqual(c.data("bs.carousel").options.interval,1814,"even if there is an data-modal attribute set"),c.remove(),c.appendTo("body"),$("[data-slide]").first().trigger("click"),c.attr("data-interval",1860),$("[data-slide]").first().trigger("click"),a.strictEqual(c.data("bs.carousel").options.interval,1814,"attributes should be read only on initialization"),c.remove(),c.attr("data-interval",!1),c.appendTo("body"),c.bootstrapCarousel(1),a.strictEqual(c.data("bs.carousel").options.interval,!1,"data attribute has higher priority than default options"),c.remove()}),QUnit.test("should skip over non-items when using item indices",function(a){a.expect(2);var b='<div id="myCarousel" class="carousel" data-interval="1814"><div class="carousel-inner"><div class="item active"><img alt=""></div><script type="text/x-metamorph" id="thingy"/><div class="item"><img alt=""></div><div class="item"></div></div></div>',c=$(b);c.bootstrapCarousel(),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item active"),c.bootstrapCarousel(1),a.strictEqual(c.find(".item")[1],c.find(".active")[0],"second item active")}),QUnit.test("should skip over non-items when using next/prev methods",function(a){a.expect(2);var b='<div id="myCarousel" class="carousel" data-interval="1814"><div class="carousel-inner"><div class="item active"><img alt=""></div><script type="text/x-metamorph" id="thingy"/><div class="item"><img alt=""></div><div class="item"></div></div></div>',c=$(b);c.bootstrapCarousel(),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item active"),c.bootstrapCarousel("next"),a.strictEqual(c.find(".item")[1],c.find(".active")[0],"second item active")}),QUnit.test("should go to previous item if left arrow key is pressed",function(a){a.expect(2);var b='<div id="myCarousel" class="carousel" data-interval="false"><div class="carousel-inner"><div id="first" class="item"><img alt=""></div><div id="second" class="item active"><img alt=""></div><div id="third" class="item"><img alt=""></div></div></div>',c=$(b);c.bootstrapCarousel(),a.strictEqual(c.find(".item")[1],c.find(".active")[0],"second item active"),c.trigger($.Event("keydown",{which:37})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item active")}),QUnit.test("should go to next item if right arrow key is pressed",function(a){a.expect(2);var b='<div id="myCarousel" class="carousel" data-interval="false"><div class="carousel-inner"><div id="first" class="item active"><img alt=""></div><div id="second" class="item"><img alt=""></div><div id="third" class="item"><img alt=""></div></div></div>',c=$(b);c.bootstrapCarousel(),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item active"),c.trigger($.Event("keydown",{which:39})),a.strictEqual(c.find(".item")[1],c.find(".active")[0],"second item active")}),QUnit.test("should support disabling the keyboard navigation",function(a){a.expect(3);var b='<div id="myCarousel" class="carousel" data-interval="false" data-keyboard="false"><div class="carousel-inner"><div id="first" class="item active"><img alt=""></div><div id="second" class="item"><img alt=""></div><div id="third" class="item"><img alt=""></div></div></div>',c=$(b);c.bootstrapCarousel(),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item active"),c.trigger($.Event("keydown",{which:39})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item still active after right arrow press"),c.trigger($.Event("keydown",{which:37})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item still active after left arrow press")}),QUnit.test("should ignore keyboard events within <input>s and <textarea>s",function(a){a.expect(7);var b='<div id="myCarousel" class="carousel" data-interval="false"><div class="carousel-inner"><div id="first" class="item active"><img alt=""><input type="text" id="in-put"><textarea id="text-area"></textarea></div><div id="second" class="item"><img alt=""></div><div id="third" class="item"><img alt=""></div></div></div>',c=$(b),d=c.find("#in-put"),e=c.find("#text-area");a.strictEqual(d.length,1,"found <input>"),a.strictEqual(e.length,1,"found <textarea>"),c.bootstrapCarousel(),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item active"),d.trigger($.Event("keydown",{which:39})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item still active after right arrow press in <input>"),d.trigger($.Event("keydown",{which:37})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item still active after left arrow press in <input>"),e.trigger($.Event("keydown",{which:39})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item still active after right arrow press in <textarea>"),e.trigger($.Event("keydown",{which:37})),a.strictEqual(c.find(".item")[0],c.find(".active")[0],"first item still active after left arrow press in <textarea>")}),QUnit.test("should only add mouseenter and mouseleave listeners when not on mobile",function(a){a.expect(2);var b="ontouchstart"in document.documentElement,c='<div id="myCarousel" class="carousel" data-interval="false" data-pause="hover"><div class="carousel-inner"><div id="first" class="item active"><img alt=""></div><div id="second" class="item"><img alt=""></div><div id="third" class="item"><img alt=""></div></div></div>',d=$(c).bootstrapCarousel();$.each(["mouseover","mouseout"],function(c,e){a.strictEqual(e in $._data(d[0],"events"),!b,"does"+(b?" not":"")+" listen for "+e+" events")})}),QUnit.test("should wrap around from end to start when wrap option is true",function(a){a.expect(3);var b='<div id="carousel-example-generic" class="carousel slide" data-wrap="true"><ol class="carousel-indicators"><li data-target="#carousel-example-generic" data-slide-to="0" class="active"/><li data-target="#carousel-example-generic" data-slide-to="1"/><li data-target="#carousel-example-generic" data-slide-to="2"/></ol><div class="carousel-inner"><div class="item active" id="one"><div class="carousel-caption"/></div><div class="item" id="two"><div class="carousel-caption"/></div><div class="item" id="three"><div class="carousel-caption"/></div></div><a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"/><a class="right carousel-control" href="#carousel-example-generic" data-slide="next"/></div>',c=$(b),d=function(){return c.find(".item.active").attr("id")},e=a.async();c.one("slid.bs.carousel",function(){a.strictEqual(d(),"two","carousel slid from 1st to 2nd slide"),c.one("slid.bs.carousel",function(){a.strictEqual(d(),"three","carousel slid from 2nd to 3rd slide"),c.one("slid.bs.carousel",function(){a.strictEqual(d(),"one","carousel wrapped around and slid from 3rd to 1st slide"),e()}).bootstrapCarousel("next")}).bootstrapCarousel("next")}).bootstrapCarousel("next")}),QUnit.test("should wrap around from start to end when wrap option is true",function(a){a.expect(1);var b='<div id="carousel-example-generic" class="carousel slide" data-wrap="true"><ol class="carousel-indicators"><li data-target="#carousel-example-generic" data-slide-to="0" class="active"/><li data-target="#carousel-example-generic" data-slide-to="1"/><li data-target="#carousel-example-generic" data-slide-to="2"/></ol><div class="carousel-inner"><div class="item active" id="one"><div class="carousel-caption"/></div><div class="item" id="two"><div class="carousel-caption"/></div><div class="item" id="three"><div class="carousel-caption"/></div></div><a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"/><a class="right carousel-control" href="#carousel-example-generic" data-slide="next"/></div>',c=$(b),d=a.async();c.on("slid.bs.carousel",function(){a.strictEqual(c.find(".item.active").attr("id"),"three","carousel wrapped around and slid from 1st to 3rd slide"),d()}).bootstrapCarousel("prev")}),QUnit.test("should stay at the end when the next method is called and wrap is false",function(a){a.expect(3);var b='<div id="carousel-example-generic" class="carousel slide" data-wrap="false"><ol class="carousel-indicators"><li data-target="#carousel-example-generic" data-slide-to="0" class="active"/><li data-target="#carousel-example-generic" data-slide-to="1"/><li data-target="#carousel-example-generic" data-slide-to="2"/></ol><div class="carousel-inner"><div class="item active" id="one"><div class="carousel-caption"/></div><div class="item" id="two"><div class="carousel-caption"/></div><div class="item" id="three"><div class="carousel-caption"/></div></div><a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"/><a class="right carousel-control" href="#carousel-example-generic" data-slide="next"/></div>',c=$(b),d=function(){return c.find(".item.active").attr("id")},e=a.async();c.one("slid.bs.carousel",function(){a.strictEqual(d(),"two","carousel slid from 1st to 2nd slide"),c.one("slid.bs.carousel",function(){a.strictEqual(d(),"three","carousel slid from 2nd to 3rd slide"),c.one("slid.bs.carousel",function(){a.ok(!1,"carousel slid when it should not have slid")}).bootstrapCarousel("next"),a.strictEqual(d(),"three","carousel did not wrap around and stayed on 3rd slide"),e()}).bootstrapCarousel("next")}).bootstrapCarousel("next")}),QUnit.test("should stay at the start when the prev method is called and wrap is false",function(a){a.expect(1);var b='<div id="carousel-example-generic" class="carousel slide" data-wrap="false"><ol class="carousel-indicators"><li data-target="#carousel-example-generic" data-slide-to="0" class="active"/><li data-target="#carousel-example-generic" data-slide-to="1"/><li data-target="#carousel-example-generic" data-slide-to="2"/></ol><div class="carousel-inner"><div class="item active" id="one"><div class="carousel-caption"/></div><div class="item" id="two"><div class="carousel-caption"/></div><div class="item" id="three"><div class="carousel-caption"/></div></div><a class="left carousel-control" href="#carousel-example-generic" data-slide="prev"/><a class="right carousel-control" href="#carousel-example-generic" data-slide="next"/></div>',c=$(b);c.on("slid.bs.carousel",function(){a.ok(!1,"carousel slid when it should not have slid")}).bootstrapCarousel("prev"),a.strictEqual(c.find(".item.active").attr("id"),"one","carousel did not wrap around and stayed on 1st slide")})}),$(function(){"use strict";QUnit.module("collapse plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).collapse,"collapse method is defined")}),QUnit.module("collapse",{beforeEach:function(){$.fn.bootstrapCollapse=$.fn.collapse.noConflict()},afterEach:function(){$.fn.collapse=$.fn.bootstrapCollapse,delete $.fn.bootstrapCollapse}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.collapse,void 0,"collapse was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapCollapse();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should show a collapsed element",function(a){a.expect(2);var b=$('<div class="collapse"/>').bootstrapCollapse("show");a.ok(b.hasClass("in"),'has class "in"'),a.ok(!/height/i.test(b.attr("style")),"has height reset")}),QUnit.test("should hide a collapsed element",function(a){a.expect(1);var b=$('<div class="collapse"/>').bootstrapCollapse("hide");a.ok(!b.hasClass("in"),'does not have class "in"')}),QUnit.test("should not fire shown when show is prevented",function(a){a.expect(1);var b=a.async();$('<div class="collapse"/>').on("show.bs.collapse",function(c){c.preventDefault(),a.ok(!0,"show event fired"),b()}).on("shown.bs.collapse",function(){a.ok(!1,"shown event fired")}).bootstrapCollapse("show")}),QUnit.test("should reset style to auto after finishing opening collapse",function(a){a.expect(2);var b=a.async();$('<div class="collapse" style="height: 0px"/>').on("show.bs.collapse",function(){a.strictEqual(this.style.height,"0px","height is 0px")}).on("shown.bs.collapse",function(){a.strictEqual(this.style.height,"","height is auto"),b()}).bootstrapCollapse("show")}),QUnit.test('should remove "collapsed" class from target when collapse is shown',function(a){a.expect(1);var b=a.async(),c=$('<a data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){a.ok(!c.hasClass("collapsed"),"target does not have collapsed class"),b()}),c.trigger("click")}),QUnit.test('should add "collapsed" class to target when collapse is hidden',function(a){a.expect(1);var b=a.async(),c=$('<a data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){a.ok(c.hasClass("collapsed"),"target has collapsed class"),b()}),c.trigger("click")}),QUnit.test('should remove "collapsed" class from all triggers targeting the collapse when the collapse is shown',function(a){a.expect(2);var b=a.async(),c=$('<a data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture"),d=$('<a data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){a.ok(!c.hasClass("collapsed"),"target trigger does not have collapsed class"),a.ok(!d.hasClass("collapsed"),"alt trigger does not have collapsed class"),b()}),c.trigger("click")}),QUnit.test('should add "collapsed" class to all triggers targeting the collapse when the collapse is hidden',function(a){
a.expect(2);var b=a.async(),c=$('<a data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture"),d=$('<a data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){a.ok(c.hasClass("collapsed"),"target has collapsed class"),a.ok(d.hasClass("collapsed"),"alt trigger has collapsed class"),b()}),c.trigger("click")}),QUnit.test('should not close a collapse when initialized with "show" option if already shown',function(a){a.expect(0);var b=a.async(),c=$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hide.bs.collapse",function(){a.ok(!1)});c.bootstrapCollapse("show"),setTimeout(b,0)}),QUnit.test('should open a collapse when initialized with "show" option if not already shown',function(a){a.expect(1);var b=a.async(),c=$('<div id="test1" />').appendTo("#qunit-fixture").on("show.bs.collapse",function(){a.ok(!0)});c.bootstrapCollapse("show"),setTimeout(b,0)}),QUnit.test('should not show a collapse when initialized with "hide" option if already hidden',function(a){a.expect(0);var b=a.async();$('<div class="collapse"></div>').appendTo("#qunit-fixture").on("show.bs.collapse",function(){a.ok(!1,'showing a previously-uninitialized hidden collapse when the "hide" method is called')}).bootstrapCollapse("hide"),setTimeout(b,0)}),QUnit.test('should hide a collapse when initialized with "hide" option if not already hidden',function(a){a.expect(1);var b=a.async();$('<div class="collapse in"></div>').appendTo("#qunit-fixture").on("hide.bs.collapse",function(){a.ok(!0,'hiding a previously-uninitialized shown collapse when the "hide" method is called')}).bootstrapCollapse("hide"),setTimeout(b,0)}),QUnit.test('should remove "collapsed" class from active accordion target',function(a){a.expect(3);var b=a.async(),c='<div class="panel-group" id="accordion"><div class="panel"/><div class="panel"/><div class="panel"/></div>',d=$(c).appendTo("#qunit-fixture").find(".panel"),e=$('<a data-toggle="collapse" href="#body1" data-parent="#accordion"/>').appendTo(d.eq(0));$('<div id="body1" class="in"/>').appendTo(d.eq(0));var f=$('<a class="collapsed" data-toggle="collapse" href="#body2" data-parent="#accordion"/>').appendTo(d.eq(1));$('<div id="body2"/>').appendTo(d.eq(1));var g=$('<a class="collapsed" data-toggle="collapse" href="#body3" data-parent="#accordion"/>').appendTo(d.eq(2));$('<div id="body3"/>').appendTo(d.eq(2)).on("shown.bs.collapse",function(){a.ok(e.hasClass("collapsed"),'inactive target 1 does have class "collapsed"'),a.ok(f.hasClass("collapsed"),'inactive target 2 does have class "collapsed"'),a.ok(!g.hasClass("collapsed"),'active target 3 does not have class "collapsed"'),b()}),g.trigger("click")}),QUnit.test("should allow dots in data-parent",function(a){a.expect(3);var b=a.async(),c='<div class="panel-group accordion"><div class="panel"/><div class="panel"/><div class="panel"/></div>',d=$(c).appendTo("#qunit-fixture").find(".panel"),e=$('<a data-toggle="collapse" href="#body1" data-parent=".accordion"/>').appendTo(d.eq(0));$('<div id="body1" class="in"/>').appendTo(d.eq(0));var f=$('<a class="collapsed" data-toggle="collapse" href="#body2" data-parent=".accordion"/>').appendTo(d.eq(1));$('<div id="body2"/>').appendTo(d.eq(1));var g=$('<a class="collapsed" data-toggle="collapse" href="#body3" data-parent=".accordion"/>').appendTo(d.eq(2));$('<div id="body3"/>').appendTo(d.eq(2)).on("shown.bs.collapse",function(){a.ok(e.hasClass("collapsed"),'inactive target 1 does have class "collapsed"'),a.ok(f.hasClass("collapsed"),'inactive target 2 does have class "collapsed"'),a.ok(!g.hasClass("collapsed"),'active target 3 does not have class "collapsed"'),b()}),g.trigger("click")}),QUnit.test('should set aria-expanded="true" on target when collapse is shown',function(a){a.expect(1);var b=a.async(),c=$('<a data-toggle="collapse" class="collapsed" href="#test1" aria-expanded="false"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){a.strictEqual(c.attr("aria-expanded"),"true",'aria-expanded on target is "true"'),b()}),c.trigger("click")}),QUnit.test('should set aria-expanded="false" on target when collapse is hidden',function(a){a.expect(1);var b=a.async(),c=$('<a data-toggle="collapse" href="#test1" aria-expanded="true"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){a.strictEqual(c.attr("aria-expanded"),"false",'aria-expanded on target is "false"'),b()}),c.trigger("click")}),QUnit.test('should set aria-expanded="true" on all triggers targeting the collapse when the collapse is shown',function(a){a.expect(2);var b=a.async(),c=$('<a data-toggle="collapse" class="collapsed" href="#test1" aria-expanded="false"/>').appendTo("#qunit-fixture"),d=$('<a data-toggle="collapse" class="collapsed" href="#test1" aria-expanded="false"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){a.strictEqual(c.attr("aria-expanded"),"true",'aria-expanded on target is "true"'),a.strictEqual(d.attr("aria-expanded"),"true",'aria-expanded on alt is "true"'),b()}),c.trigger("click")}),QUnit.test('should set aria-expanded="false" on all triggers targeting the collapse when the collapse is hidden',function(a){a.expect(2);var b=a.async(),c=$('<a data-toggle="collapse" href="#test1" aria-expanded="true"/>').appendTo("#qunit-fixture"),d=$('<a data-toggle="collapse" href="#test1" aria-expanded="true"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){a.strictEqual(c.attr("aria-expanded"),"false",'aria-expanded on target is "false"'),a.strictEqual(d.attr("aria-expanded"),"false",'aria-expanded on alt is "false"'),b()}),c.trigger("click")}),QUnit.test('should change aria-expanded from active accordion target to "false" and set the newly active one to "true"',function(a){a.expect(3);var b=a.async(),c='<div class="panel-group" id="accordion"><div class="panel"/><div class="panel"/><div class="panel"/></div>',d=$(c).appendTo("#qunit-fixture").find(".panel"),e=$('<a data-toggle="collapse" href="#body1" data-parent="#accordion"/>').appendTo(d.eq(0));$('<div id="body1" aria-expanded="true" class="in"/>').appendTo(d.eq(0));var f=$('<a class="collapsed" data-toggle="collapse" href="#body2" data-parent="#accordion"/>').appendTo(d.eq(1));$('<div id="body2" aria-expanded="false"/>').appendTo(d.eq(1));var g=$('<a class="collapsed" data-toggle="collapse" href="#body3" data-parent="#accordion"/>').appendTo(d.eq(2));$('<div id="body3" aria-expanded="false"/>').appendTo(d.eq(2)).on("shown.bs.collapse",function(){a.strictEqual(e.attr("aria-expanded"),"false",'inactive target 1 has aria-expanded="false"'),a.strictEqual(f.attr("aria-expanded"),"false",'inactive target 2 has aria-expanded="false"'),a.strictEqual(g.attr("aria-expanded"),"true",'active target 3 has aria-expanded="false"'),b()}),g.trigger("click")}),QUnit.test("should not fire show event if show is prevented because other element is still transitioning",function(a){a.expect(1);var b=a.async(),c='<div id="accordion"><div class="panel"/><div class="panel"/></div>',d=!1,e=$(c).appendTo("#qunit-fixture").find(".panel"),f=$('<a data-toggle="collapse" href="#body1" data-parent="#accordion"/>').appendTo(e.eq(0));$('<div id="body1" class="collapse"/>').appendTo(e.eq(0)).on("show.bs.collapse",function(){d=!0});var g=$('<a data-toggle="collapse" href="#body2" data-parent="#accordion"/>').appendTo(e.eq(1)),h=$('<div id="body2" class="collapse"/>').appendTo(e.eq(1));g.trigger("click"),h.toggleClass("in collapsing").data("bs.collapse").transitioning=1,f.trigger("click"),setTimeout(function(){a.ok(!d,"show event did not fire"),b()},1)}),QUnit.test('should add "collapsed" class to target when collapse is hidden via manual invocation',function(a){a.expect(1);var b=a.async(),c=$('<a data-toggle="collapse" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1" class="in"/>').appendTo("#qunit-fixture").on("hidden.bs.collapse",function(){a.ok(c.hasClass("collapsed")),b()}).bootstrapCollapse("hide")}),QUnit.test('should remove "collapsed" class from target when collapse is shown via manual invocation',function(a){a.expect(1);var b=a.async(),c=$('<a data-toggle="collapse" class="collapsed" href="#test1"/>').appendTo("#qunit-fixture");$('<div id="test1"/>').appendTo("#qunit-fixture").on("shown.bs.collapse",function(){a.ok(!c.hasClass("collapsed")),b()}).bootstrapCollapse("show")})}),$(function(){"use strict";QUnit.module("dropdowns plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).dropdown,"dropdown method is defined")}),QUnit.module("dropdowns",{beforeEach:function(){$.fn.bootstrapDropdown=$.fn.dropdown.noConflict()},afterEach:function(){$.fn.dropdown=$.fn.bootstrapDropdown,delete $.fn.bootstrapDropdown}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.dropdown,void 0,"dropdown was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapDropdown();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should not open dropdown if target is disabled via attribute",function(a){a.expect(1);var b='<ul class="tabs"><li class="dropdown"><button disabled href="#" class="btn dropdown-toggle" data-toggle="dropdown">Dropdown</button><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");a.ok(!c.parent(".dropdown").hasClass("open"),'"open" class added on click')}),QUnit.test('should set aria-expanded="true" on target when dropdown menu is shown',function(a){a.expect(1);var b='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown" aria-expanded="false">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");a.strictEqual(c.attr("aria-expanded"),"true",'aria-expanded is set to string "true" on click')}),QUnit.test('should set aria-expanded="false" on target when dropdown menu is hidden',function(a){a.expect(1);var b=a.async(),c='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" aria-expanded="false" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',d=$(c).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown();d.parent(".dropdown").on("hidden.bs.dropdown",function(){a.strictEqual(d.attr("aria-expanded"),"false",'aria-expanded is set to string "false" on hide'),b()}),d.trigger("click"),$(document.body).trigger("click")}),QUnit.test("should not open dropdown if target is disabled via class",function(a){a.expect(1);var b='<ul class="tabs"><li class="dropdown"><button href="#" class="btn dropdown-toggle disabled" data-toggle="dropdown">Dropdown</button><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");a.ok(!c.parent(".dropdown").hasClass("open"),'"open" class added on click')}),QUnit.test("should add class open to menu if clicked",function(a){a.expect(1);var b='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");a.ok(c.parent(".dropdown").hasClass("open"),'"open" class added on click')}),QUnit.test("should test if element has a # before assuming it's a selector",function(a){a.expect(1);var b='<ul class="tabs"><li class="dropdown"><a href="/foo/" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");a.ok(c.parent(".dropdown").hasClass("open"),'"open" class added on click')}),QUnit.test('should remove "open" class if body is clicked',function(a){a.expect(2);var b='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");a.ok(c.parent(".dropdown").hasClass("open"),'"open" class added on click'),$(document.body).trigger("click"),a.ok(!c.parent(".dropdown").hasClass("open"),'"open" class removed')}),QUnit.test('should remove "open" class if body is clicked, with multiple dropdowns',function(a){a.expect(7);var b='<ul class="nav"><li><a href="#menu1">Menu 1</a></li><li class="dropdown" id="testmenu"><a class="dropdown-toggle" data-toggle="dropdown" href="#testmenu">Test menu <span class="caret"/></a><ul class="dropdown-menu" role="menu"><li><a href="#sub1">Submenu 1</a></li></ul></li></ul><div class="btn-group"><button class="btn">Actions</button><button class="btn dropdown-toggle" data-toggle="dropdown"><span class="caret"/></button><ul class="dropdown-menu"><li><a href="#">Action 1</a></li></ul></div>',c=$(b).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]'),d=c.first(),e=c.last();a.strictEqual(c.length,2,"two dropdowns"),d.trigger("click"),a.strictEqual(d.parents(".open").length,1,'"open" class added on click'),a.strictEqual($("#qunit-fixture .open").length,1,"only one dropdown is open"),$(document.body).trigger("click"),a.strictEqual($("#qunit-fixture .open").length,0,'"open" class removed'),e.trigger("click"),a.strictEqual(e.parent(".open").length,1,'"open" class added on click'),a.strictEqual($("#qunit-fixture .open").length,1,"only one dropdown is open"),$(document.body).trigger("click"),a.strictEqual($("#qunit-fixture .open").length,0,'"open" class removed')}),QUnit.test("should fire show and hide event",function(a){a.expect(2);var b='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),d=a.async();c.parent(".dropdown").on("show.bs.dropdown",function(){a.ok(!0,"show was fired")}).on("hide.bs.dropdown",function(){a.ok(!0,"hide was fired"),d()}),c.trigger("click"),$(document.body).trigger("click")}),QUnit.test("should fire shown and hidden event",function(a){a.expect(2);var b='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),d=a.async();c.parent(".dropdown").on("shown.bs.dropdown",function(){a.ok(!0,"shown was fired")}).on("hidden.bs.dropdown",function(){a.ok(!0,"hidden was fired"),d()}),c.trigger("click"),$(document.body).trigger("click")}),QUnit.test("should ignore keyboard events within <input>s and <textarea>s",function(a){a.expect(3);var b=a.async(),c='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu" role="menu"><li><a href="#">Secondary link</a></li><li><a href="#">Something else here</a></li><li class="divider"/><li><a href="#">Another link</a></li><li><input type="text" id="input"></li><li><textarea id="textarea"/></li></ul></li></ul>',d=$(c).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown(),e=$("#input"),f=$("#textarea");d.parent(".dropdown").on("shown.bs.dropdown",function(){a.ok(!0,"shown was fired"),e.trigger("focus").trigger($.Event("keydown",{which:38})),a.ok($(document.activeElement).is(e),"input still focused"),f.trigger("focus").trigger($.Event("keydown",{which:38})),a.ok($(document.activeElement).is(f),"textarea still focused"),b()}),d.trigger("click")}),QUnit.test("should skip disabled element when using keyboard navigation",function(a){a.expect(1);var b='<ul class="tabs"><li class="dropdown"><a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown</a><ul class="dropdown-menu" role="menu"><li class="disabled"><a href="#">Disabled link</a></li><li><a href="#">Another link</a></li></ul></li></ul>',c=$(b).appendTo("#qunit-fixture").find('[data-toggle="dropdown"]').bootstrapDropdown().trigger("click");c.trigger($.Event("keydown",{which:40})),c.trigger($.Event("keydown",{which:40})),a.ok(!$(document.activeElement).parent().is(".disabled"),".disabled is not focused")})}),$(function(){"use strict";QUnit.module("modal plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).modal,"modal method is defined")}),QUnit.module("modal",{beforeEach:function(){$.fn.bootstrapModal=$.fn.modal.noConflict()},afterEach:function(){$.fn.modal=$.fn.bootstrapModal,delete $.fn.bootstrapModal}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.modal,void 0,"modal was set back to undefined (orig value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$('<div id="modal-test"/>'),c=b.bootstrapModal();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should expose defaults var for settings",function(a){a.expect(1),a.ok($.fn.bootstrapModal.Constructor.DEFAULTS,"default object exposed")}),QUnit.test("should insert into dom when show method is called",function(a){a.expect(1);var b=a.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){a.notEqual($("#modal-test").length,0,"modal inserted into dom"),b()}).bootstrapModal("show")}),QUnit.test("should set aria-hidden to false when show method is called",function(a){a.expect(1);var b=a.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){a.strictEqual($("#modal-test").attr("aria-hidden"),"false",'aria-hidden is set to string "false" when modal shown'),b()}).bootstrapModal("show")}),QUnit.test("should fire show event",function(a){a.expect(1);var b=a.async();$('<div id="modal-test"/>').on("show.bs.modal",function(){a.ok(!0,"show event fired"),b()}).bootstrapModal("show")}),QUnit.test("should not fire shown when show was prevented",function(a){a.expect(1);var b=a.async();$('<div id="modal-test"/>').on("show.bs.modal",function(c){c.preventDefault(),a.ok(!0,"show event fired"),b()}).on("shown.bs.modal",function(){a.ok(!1,"shown event fired")}).bootstrapModal("show")}),QUnit.test("should hide modal when hide is called",function(a){a.expect(3);var b=a.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){a.ok($("#modal-test").is(":visible"),"modal visible"),a.notEqual($("#modal-test").length,0,"modal inserted into dom"),$(this).bootstrapModal("hide")}).on("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),b()}).bootstrapModal("show")}),QUnit.test("should set aria-hidden to true when hide is called",function(a){a.expect(2);var b=a.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){a.strictEqual($("#modal-test").length,1,"modal has been inserted into the dom"),$(this).bootstrapModal("hide")}).on("hidden.bs.modal",function(){a.strictEqual($("#modal-test").attr("aria-hidden"),"true",'aria-hidden is set to string "true" when modal shown'),b()}).bootstrapModal("show")}),QUnit.test("should toggle when toggle is called",function(a){a.expect(3);var b=a.async();$('<div id="modal-test"/>').on("shown.bs.modal",function(){a.ok($("#modal-test").is(":visible"),"modal visible"),a.notEqual($("#modal-test").length,0,"modal inserted into dom"),$(this).bootstrapModal("toggle")}).on("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),b()}).bootstrapModal("toggle")}),QUnit.test('should remove from dom when click [data-dismiss="modal"]',function(a){a.expect(3);var b=a.async();$('<div id="modal-test"><span class="close" data-dismiss="modal"/></div>').on("shown.bs.modal",function(){a.ok($("#modal-test").is(":visible"),"modal visible"),a.notEqual($("#modal-test").length,0,"modal inserted into dom"),$(this).find(".close").trigger("click")}).on("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),b()}).bootstrapModal("toggle")}),QUnit.test('should allow modal close with "backdrop:false"',function(a){a.expect(2);var b=a.async();$('<div id="modal-test" data-backdrop="false"/>').on("shown.bs.modal",function(){a.ok($("#modal-test").is(":visible"),"modal visible"),$(this).bootstrapModal("hide")}).on("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),b()}).bootstrapModal("show")}),QUnit.test("should close modal when clicking outside of modal-content",function(a){a.expect(3);var b=a.async();$('<div id="modal-test"><div class="contents"/></div>').on("shown.bs.modal",function(){a.notEqual($("#modal-test").length,0,"modal inserted into dom"),$(".contents").trigger("click"),a.ok($("#modal-test").is(":visible"),"modal visible"),$("#modal-test").trigger("click")}).on("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),b()}).bootstrapModal("show")}),QUnit.test("should close modal when escape key is pressed via keydown",function(a){a.expect(3);var b=a.async(),c=$('<div id="modal-test"/>');c.on("shown.bs.modal",function(){a.ok($("#modal-test").length,"modal insterted into dom"),a.ok($("#modal-test").is(":visible"),"modal visible"),c.trigger($.Event("keydown",{which:27})),setTimeout(function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),c.remove(),b()},0)}).bootstrapModal("show")}),QUnit.test("should not close modal when escape key is pressed via keyup",function(a){a.expect(3);var b=a.async(),c=$('<div id="modal-test"/>');c.on("shown.bs.modal",function(){a.ok($("#modal-test").length,"modal inserted into dom"),a.ok($("#modal-test").is(":visible"),"modal visible"),c.trigger($.Event("keyup",{which:27})),setTimeout(function(){a.ok($("#modal-test").is(":visible"),"modal still visible"),c.remove(),b()},0)}).bootstrapModal("show")}),QUnit.test("should trigger hide event once when clicking outside of modal-content",function(a){a.expect(1);var b,c=a.async();$('<div id="modal-test"><div class="contents"/></div>').on("shown.bs.modal",function(){b=0,$("#modal-test").trigger("click")}).on("hide.bs.modal",function(){b+=1,a.strictEqual(b,1,"modal hide triggered once"),c()}).bootstrapModal("show")}),QUnit.test('should close reopened modal with [data-dismiss="modal"] click',function(a){a.expect(2);var b=a.async();$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div></div>').one("shown.bs.modal",function(){$("#close").trigger("click")}).one("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),$(this).one("shown.bs.modal",function(){$("#close").trigger("click")}).one("hidden.bs.modal",function(){a.ok(!$("#modal-test").is(":visible"),"modal hidden"),b()}).bootstrapModal("show")}).bootstrapModal("show")}),QUnit.test("should restore focus to toggling element when modal is hidden after having been opened via data-api",function(a){a.expect(1);var b=a.async(),c=$('<button data-toggle="modal" data-target="#modal-test"/>').appendTo("#qunit-fixture");$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div></div>').on("hidden.bs.modal",function(){setTimeout(function(){a.ok($(document.activeElement).is(c),"toggling element is once again focused"),b()},0)}).on("shown.bs.modal",function(){$("#close").trigger("click")}).appendTo("#qunit-fixture"),c.trigger("click")}),QUnit.test("should not restore focus to toggling element if the associated show event gets prevented",function(a){a.expect(1);var b=a.async(),c=$('<button data-toggle="modal" data-target="#modal-test"/>').appendTo("#qunit-fixture"),d=$('<button id="other-btn"/>').appendTo("#qunit-fixture");$('<div id="modal-test"><div class="contents"><div id="close" data-dismiss="modal"/></div>').one("show.bs.modal",function(a){a.preventDefault(),d.trigger("focus"),setTimeout($.proxy(function(){$(this).bootstrapModal("show")},this),0)}).on("hidden.bs.modal",function(){setTimeout(function(){a.ok($(document.activeElement).is(d),"focus returned to toggling element"),b()},0)}).on("shown.bs.modal",function(){$("#close").trigger("click")}).appendTo("#qunit-fixture"),c.trigger("click")}),QUnit.test("should restore inline body padding after closing",function(a){a.expect(2);var b=a.async(),c=0,d=$(document.body);d.css("padding-right",c),$('<div id="modal-test"/>').on("hidden.bs.modal",function(){var e=parseInt(d.css("padding-right"),10);a.notStrictEqual(d.attr("style"),"","body has non-empty style attribute"),a.strictEqual(e,c,"original body padding was not changed"),d.removeAttr("style"),b()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")}),QUnit.test("should ignore values set via CSS when trying to restore body padding after closing",function(a){a.expect(1);var b=a.async(),c=$(document.body),d=$("<style>body { padding-right: 42px; }</style>").appendTo("head");$('<div id="modal-test"/>').on("hidden.bs.modal",function(){a.ok(!c.attr("style"),"body does not have inline padding set"),d.remove(),b()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")}),QUnit.test("should ignore other inline styles when trying to restore body padding after closing",function(a){a.expect(2);var b=a.async(),c=$(document.body),d=$("<style>body { padding-right: 42px; }</style>").appendTo("head");c.css("color","red"),$('<div id="modal-test"/>').on("hidden.bs.modal",function(){a.strictEqual(c[0].style.paddingRight,"","body does not have inline padding set"),a.strictEqual(c[0].style.color,"red","body still has other inline styles set"),c.removeAttr("style"),d.remove(),b()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")}),QUnit.test("should properly restore non-pixel inline body padding after closing",function(a){a.expect(1);var b=a.async(),c=$(document.body);c.css("padding-right","5%"),$('<div id="modal-test"/>').on("hidden.bs.modal",function(){a.strictEqual(c[0].style.paddingRight,"5%","body does not have inline padding set"),c.removeAttr("style"),b()}).on("shown.bs.modal",function(){$(this).bootstrapModal("hide")}).bootstrapModal("show")})}),$(function(){"use strict";QUnit.module("tooltip plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).tooltip,"tooltip method is defined")}),QUnit.module("tooltip",{beforeEach:function(){$.fn.bootstrapTooltip=$.fn.tooltip.noConflict()},afterEach:function(){$.fn.tooltip=$.fn.bootstrapTooltip,delete $.fn.bootstrapTooltip}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.tooltip,void 0,"tooltip was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapTooltip();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should expose default settings",function(a){a.expect(1),a.ok($.fn.bootstrapTooltip.Constructor.DEFAULTS,"defaults is defined")}),QUnit.test("should empty title attribute",function(a){a.expect(1);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').bootstrapTooltip();a.strictEqual(b.attr("title"),"","title attribute was emptied")}),QUnit.test("should add data attribute for referencing original title",function(a){a.expect(1);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').bootstrapTooltip();a.strictEqual(b.attr("data-original-title"),"Another tooltip","original title preserved in data attribute")}),QUnit.test("should add aria-describedby to the trigger on show",function(a){a.expect(3);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').bootstrapTooltip().appendTo("#qunit-fixture").bootstrapTooltip("show"),c=$(".tooltip").attr("id");a.strictEqual($("#"+c).length,1,"has a unique id"),a.strictEqual($(".tooltip").attr("aria-describedby"),b.attr("id"),"tooltip id and aria-describedby on trigger match"),a.ok(b[0].hasAttribute("aria-describedby"),"trigger has aria-describedby")}),QUnit.test("should remove aria-describedby from trigger on hide",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').bootstrapTooltip().appendTo("#qunit-fixture");b.bootstrapTooltip("show"),a.ok(b[0].hasAttribute("aria-describedby"),"trigger has aria-describedby"),b.bootstrapTooltip("hide"),a.ok(!b[0].hasAttribute("aria-describedby"),"trigger does not have aria-describedby")}),QUnit.test("should assign a unique id tooltip element",function(a){a.expect(2),$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip("show");var b=$(".tooltip").attr("id");a.strictEqual($("#"+b).length,1,"tooltip has unique id"),a.strictEqual(b.indexOf("tooltip"),0,"tooltip id has prefix")}),QUnit.test("should place tooltips relative to placement option",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({placement:"bottom"});b.bootstrapTooltip("show"),a.ok($(".tooltip").is(".fade.bottom.in"),"has correct classes applied"),b.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed")}),QUnit.test("should allow html entities",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip" title="&lt;b&gt;@fat&lt;/b&gt;"/>').appendTo("#qunit-fixture").bootstrapTooltip({html:!0});b.bootstrapTooltip("show"),a.notEqual($(".tooltip b").length,0,"b tag was inserted"),b.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed")}),QUnit.test("should respect custom classes",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({template:'<div class="tooltip some-class"><div class="tooltip-arrow"/><div class="tooltip-inner"/></div>'});b.bootstrapTooltip("show"),a.ok($(".tooltip").hasClass("some-class"),"custom class is present"),b.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed")}),QUnit.test("should fire show event",function(a){a.expect(1);var b=a.async();$('<div title="tooltip title"/>').on("show.bs.tooltip",function(){a.ok(!0,"show event fired"),b()}).bootstrapTooltip("show")}),QUnit.test("should fire shown event",function(a){a.expect(1);var b=a.async();$('<div title="tooltip title"></div>').appendTo("#qunit-fixture").on("shown.bs.tooltip",function(){a.ok(!0,"shown was called"),
b()}).bootstrapTooltip("show")}),QUnit.test("should not fire shown event when show was prevented",function(a){a.expect(1);var b=a.async();$('<div title="tooltip title"/>').on("show.bs.tooltip",function(c){c.preventDefault(),a.ok(!0,"show event fired"),b()}).on("shown.bs.tooltip",function(){a.ok(!1,"shown event fired")}).bootstrapTooltip("show")}),QUnit.test("should fire hide event",function(a){a.expect(1);var b=a.async();$('<div title="tooltip title"/>').appendTo("#qunit-fixture").on("shown.bs.tooltip",function(){$(this).bootstrapTooltip("hide")}).on("hide.bs.tooltip",function(){a.ok(!0,"hide event fired"),b()}).bootstrapTooltip("show")}),QUnit.test("should fire hidden event",function(a){a.expect(1);var b=a.async();$('<div title="tooltip title"/>').appendTo("#qunit-fixture").on("shown.bs.tooltip",function(){$(this).bootstrapTooltip("hide")}).on("hidden.bs.tooltip",function(){a.ok(!0,"hidden event fired"),b()}).bootstrapTooltip("show")}),QUnit.test("should not fire hidden event when hide was prevented",function(a){a.expect(1);var b=a.async();$('<div title="tooltip title"/>').appendTo("#qunit-fixture").on("shown.bs.tooltip",function(){$(this).bootstrapTooltip("hide")}).on("hide.bs.tooltip",function(c){c.preventDefault(),a.ok(!0,"hide event fired"),b()}).on("hidden.bs.tooltip",function(){a.ok(!1,"hidden event fired")}).bootstrapTooltip("show")}),QUnit.test("should destroy tooltip",function(a){a.expect(7);var b=$("<div/>").bootstrapTooltip().on("click.foo",function(){});a.ok(b.data("bs.tooltip"),"tooltip has data"),a.ok($._data(b[0],"events").mouseover&&$._data(b[0],"events").mouseout,"tooltip has hover events"),a.strictEqual($._data(b[0],"events").click[0].namespace,"foo","tooltip has extra click.foo event"),b.bootstrapTooltip("show"),b.bootstrapTooltip("destroy"),a.ok(!b.hasClass("in"),"tooltip is hidden"),a.ok(!$._data(b[0],"bs.tooltip"),"tooltip does not have data"),a.strictEqual($._data(b[0],"events").click[0].namespace,"foo","tooltip still has click.foo"),a.ok(!$._data(b[0],"events").mouseover&&!$._data(b[0],"events").mouseout,"tooltip does not have hover events")}),QUnit.test("should show tooltip with delegate selector on click",function(a){a.expect(2);var b=$('<div><a href="#" rel="tooltip" title="Another tooltip"/></div>').appendTo("#qunit-fixture").bootstrapTooltip({selector:'a[rel="tooltip"]',trigger:"click"});b.find("a").trigger("click"),a.ok($(".tooltip").is(".fade.in"),"tooltip is faded in"),b.find("a").trigger("click"),a.strictEqual($(".tooltip").length,0,"tooltip was removed from dom")}),QUnit.test("should show tooltip when toggle is called",function(a){a.expect(1),$('<a href="#" rel="tooltip" title="tooltip on toggle"/>').appendTo("#qunit-fixture").bootstrapTooltip({trigger:"manual"}).bootstrapTooltip("toggle"),a.ok($(".tooltip").is(".fade.in"),"tooltip is faded in")}),QUnit.test("should hide previously shown tooltip when toggle is called on tooltip",function(a){a.expect(1),$('<a href="#" rel="tooltip" title="tooltip on toggle">@ResentedHook</a>').appendTo("#qunit-fixture").bootstrapTooltip({trigger:"manual"}).bootstrapTooltip("show"),$(".tooltip").bootstrapTooltip("toggle"),a.ok($(".tooltip").not(".fade.in"),"tooltip was faded out")}),QUnit.test("should place tooltips inside body when container is body",function(a){a.expect(3);var b=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({container:"body"}).bootstrapTooltip("show");a.notEqual($("body > .tooltip").length,0,"tooltip is direct descendant of body"),a.strictEqual($("#qunit-fixture > .tooltip").length,0,"tooltip is not in parent"),b.bootstrapTooltip("hide"),a.strictEqual($("body > .tooltip").length,0,"tooltip was removed from dom")}),QUnit.test("should add position class before positioning so that position-specific styles are taken into account",function(a){a.expect(1);var b="<style>.tooltip.right { white-space: nowrap; }.tooltip.right .tooltip-inner { max-width: none; }</style>",c=$(b).appendTo("head"),d=$("<div/>").appendTo("#qunit-fixture"),e=$('<a href="#" rel="tooltip" title="very very very very very very very very long tooltip in one line"/>').appendTo(d).bootstrapTooltip({placement:"right",viewport:null}).bootstrapTooltip("show"),f=d.find(".tooltip"),g=Math.round(e.offset().top+e[0].offsetHeight/2-f[0].offsetHeight/2),h=Math.round(f.offset().top),i=g-h;a.ok(1>=i&&i>=-1),e.bootstrapTooltip("hide"),d.remove(),c.remove()}),QUnit.test("should use title attribute for tooltip text",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip" title="Simple tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip();b.bootstrapTooltip("show"),a.strictEqual($(".tooltip").children(".tooltip-inner").text(),"Simple tooltip","title from title attribute is set"),b.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom")}),QUnit.test("should prefer title attribute over title option",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip" title="Simple tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({title:"This is a tooltip with some content"});b.bootstrapTooltip("show"),a.strictEqual($(".tooltip").children(".tooltip-inner").text(),"Simple tooltip","title is set from title attribute while preferred over title option"),b.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom")}),QUnit.test("should use title option",function(a){a.expect(2);var b=$('<a href="#" rel="tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({title:"This is a tooltip with some content"});b.bootstrapTooltip("show"),a.strictEqual($(".tooltip").children(".tooltip-inner").text(),"This is a tooltip with some content","title from title option is set"),b.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom")}),QUnit.test("should be placed dynamically with the dynamic placement option",function(a){a.expect(6);var b=$('<style> a[rel="tooltip"] { display: inline-block; position: absolute; } </style>'),c=$("<div/>").css({position:"absolute",overflow:"hidden",width:600,height:400,top:0,left:0}).appendTo(document.body),d=$('<div style="left: 0; top: 0;" rel="tooltip" title="Top tooltip">Top Dynamic Tooltip</div>').appendTo(c).bootstrapTooltip({placement:"auto"});d.bootstrapTooltip("show"),a.ok($(".tooltip").is(".bottom"),"top positioned tooltip is dynamically positioned to bottom"),d.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"top positioned tooltip removed from dom");var e=$('<div style="right: 0;" rel="tooltip" title="Right tooltip">Right Dynamic Tooltip</div>').appendTo(c).bootstrapTooltip({placement:"right auto"});e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".left"),"right positioned tooltip is dynamically positioned left"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"right positioned tooltip removed from dom");var f=$('<div style="left: 0;" rel="tooltip" title="Left tooltip">Left Dynamic Tooltip</div>').appendTo(c).bootstrapTooltip({placement:"auto left"});f.bootstrapTooltip("show"),a.ok($(".tooltip").is(".right"),"left positioned tooltip is dynamically positioned right"),f.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"left positioned tooltip removed from dom"),c.remove(),b.remove()}),QUnit.test('should position tip on top if viewport has enough space and placement is "auto top"',function(a){a.expect(2);var b='<style>body { padding-top: 100px; }#section { height: 300px; border: 1px solid red; padding-top: 50px }div[rel="tooltip"] { width: 150px; border: 1px solid blue; }</style>',c=$(b).appendTo("head"),d=$('<div id="section"/>').appendTo("#qunit-fixture"),e=$('<div rel="tooltip" title="tip"/>').appendTo(d).bootstrapTooltip({placement:"auto top",viewport:"#section"});e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".top"),"top positioned tooltip is dynamically positioned to top"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test('should position tip on bottom if the tip\'s dimension exceeds the viewport area and placement is "auto top"',function(a){a.expect(2);var b='<style>body { padding-top: 100px; }#section { height: 300px; border: 1px solid red; }div[rel="tooltip"] { width: 150px; border: 1px solid blue; }</style>',c=$(b).appendTo("head"),d=$('<div id="section"/>').appendTo("#qunit-fixture"),e=$('<div rel="tooltip" title="tip"/>').appendTo(d).bootstrapTooltip({placement:"auto top",viewport:"#section"});e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".bottom"),"top positioned tooltip is dynamically positioned to bottom"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test('should display the tip on top whenever scrollable viewport has enough room if the given placement is "auto top"',function(a){a.expect(2);var b="<style>#scrollable-div { height: 200px; overflow: auto; }.tooltip-item { margin: 200px 0 400px; width: 150px; }</style>",c=$(b).appendTo("head"),d=$('<div id="scrollable-div"/>').appendTo("#qunit-fixture"),e=$('<div rel="tooltip" title="tip" class="tooltip-item">Tooltip Item</div>').appendTo(d).bootstrapTooltip({placement:"top auto",viewport:"#scrollable-div"});$("#scrollable-div").scrollTop(100),e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".fade.top.in"),"has correct classes applied"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test('should display the tip on bottom whenever scrollable viewport doesn\'t have enough room if the given placement is "auto top"',function(a){a.expect(2);var b="<style>#scrollable-div { height: 200px; overflow: auto; }.tooltip-item { padding: 200px 0 400px; width: 150px; }</style>",c=$(b).appendTo("head"),d=$('<div id="scrollable-div"/>').appendTo("#qunit-fixture"),e=$('<div rel="tooltip" title="tip" class="tooltip-item">Tooltip Item</div>').appendTo(d).bootstrapTooltip({placement:"top auto",viewport:"#scrollable-div"});$("#scrollable-div").scrollTop(200),e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".fade.bottom.in"),"has correct classes applied"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test('should display the tip on bottom whenever scrollable viewport has enough room if the given placement is "auto bottom"',function(a){a.expect(2);var b="<style>#scrollable-div { height: 200px; overflow: auto; }.spacer { height: 400px; }.spacer:first-child { height: 200px; }.tooltip-item { width: 150px; }</style>",c=$(b).appendTo("head"),d=$('<div id="scrollable-div"/>').appendTo("#qunit-fixture"),e=$('<div rel="tooltip" title="tip" class="tooltip-item">Tooltip Item</div>').appendTo(d).before('<div class="spacer"/>').after('<div class="spacer"/>').bootstrapTooltip({placement:"bottom auto",viewport:"#scrollable-div"});$("#scrollable-div").scrollTop(200),e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".fade.bottom.in"),"has correct classes applied"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test('should display the tip on top whenever scrollable viewport doesn\'t have enough room if the given placement is "auto bottom"',function(a){a.expect(2);var b="<style>#scrollable-div { height: 200px; overflow: auto; }.tooltip-item { margin-top: 400px; width: 150px; }</style>",c=$(b).appendTo("head"),d=$('<div id="scrollable-div"/>').appendTo("#qunit-fixture"),e=$('<div rel="tooltip" title="tip" class="tooltip-item">Tooltip Item</div>').appendTo(d).bootstrapTooltip({placement:"bottom auto",viewport:"#scrollable-div"});$("#scrollable-div").scrollTop(400),e.bootstrapTooltip("show"),a.ok($(".tooltip").is(".fade.top.in"),"has correct classes applied"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test("should adjust the tip's top position when up against the top of the viewport",function(a){a.expect(2);var b='<style>.tooltip .tooltip-inner { width: 200px; height: 200px; max-width: none; }a[rel="tooltip"] { position: fixed; }</style>',c=$(b).appendTo("head"),d=$("<div/>").appendTo("#qunit-fixture"),e=$('<a href="#" rel="tooltip" title="tip" style="top: 0px; left: 0px;"/>').appendTo(d).bootstrapTooltip({placement:"right",viewport:{selector:"body",padding:12}});e.bootstrapTooltip("show"),a.strictEqual(Math.round(d.find(".tooltip").offset().top),12),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),c.remove()}),QUnit.test("should adjust the tip's top position when up against the bottom of the viewport",function(a){a.expect(2);var b='<style>.tooltip .tooltip-inner { width: 200px; height: 200px; max-width: none; }a[rel="tooltip"] { position: fixed; }</style>',c=$(b).appendTo("head"),d=$("<div/>").appendTo("#qunit-fixture"),e=$('<a href="#" rel="tooltip" title="tip" style="bottom: 0px; left: 0px;"/>').appendTo(d).bootstrapTooltip({placement:"right",viewport:{selector:"body",padding:12}});e.bootstrapTooltip("show");var f=d.find(".tooltip");a.strictEqual(Math.round(f.offset().top),Math.round($(window).height()-12-f[0].offsetHeight)),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),d.remove(),c.remove()}),QUnit.test("should adjust the tip's left position when up against the left of the viewport",function(a){a.expect(2);var b='<style>.tooltip .tooltip-inner { width: 200px; height: 200px; max-width: none; }a[rel="tooltip"] { position: fixed; }</style>',c=$(b).appendTo("head"),d=$("<div/>").appendTo("#qunit-fixture"),e=$('<a href="#" rel="tooltip" title="tip" style="top: 0px; left: 0px;"/>').appendTo(d).bootstrapTooltip({placement:"bottom",viewport:{selector:"body",padding:12}});e.bootstrapTooltip("show"),a.strictEqual(Math.round(d.find(".tooltip").offset().left),12),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),d.remove(),c.remove()}),QUnit.test("should adjust the tip's left position when up against the right of the viewport",function(a){a.expect(2);var b='<style>.tooltip .tooltip-inner { width: 200px; height: 200px; max-width: none; }a[rel="tooltip"] { position: fixed; }</style>',c=$(b).appendTo("head"),d=$("<div/>").appendTo("body"),e=$('<a href="#" rel="tooltip" title="tip" style="top: 0px; right: 0px;"/>').appendTo(d).bootstrapTooltip({placement:"bottom",viewport:{selector:"body",padding:12}});e.bootstrapTooltip("show");var f=d.find(".tooltip");a.strictEqual(Math.round(f.offset().left),Math.round($(window).width()-12-f[0].offsetWidth)),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),d.remove(),c.remove()}),QUnit.test("should adjust the tip when up against the right of an arbitrary viewport",function(a){a.expect(2);var b='<style>.tooltip, .tooltip .tooltip-inner { width: 200px; height: 200px; max-width: none; }.container-viewport { position: absolute; top: 50px; left: 60px; width: 300px; height: 300px; }a[rel="tooltip"] { position: fixed; }</style>',c=$(b).appendTo("head"),d=$('<div class="container-viewport"/>').appendTo(document.body),e=$('<a href="#" rel="tooltip" title="tip" style="top: 50px; left: 350px;"/>').appendTo(d).bootstrapTooltip({placement:"bottom",viewport:".container-viewport"});e.bootstrapTooltip("show");var f=d.find(".tooltip");a.strictEqual(Math.round(f.offset().left),Math.round(60+d.width()-f[0].offsetWidth)),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),d.remove(),c.remove()}),QUnit.test("should not error when trying to show an auto-placed tooltip that has been removed from the dom",function(a){a.expect(1);var b=!0,c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").one("show.bs.tooltip",function(){$(this).remove()}).bootstrapTooltip({placement:"auto"});try{c.bootstrapTooltip("show")}catch(d){b=!1,console.log(d)}a.ok(b,".tooltip('show') should not throw an error if element no longer is in dom")}),QUnit.test("should place tooltip on top of element",function(a){a.expect(1);var b=a.async(),c='<div><p style="margin-top: 200px"><a href="#" title="very very very very very very very long tooltip">Hover me</a></p></div>',d=$(c).css({position:"absolute",bottom:0,left:0,textAlign:"right",width:300,height:300}).appendTo("#qunit-fixture"),e=d.find("a").css("margin-top",200).bootstrapTooltip({placement:"top",animate:!1}).bootstrapTooltip("show"),f=d.find(".tooltip");setTimeout(function(){a.ok(Math.round(f.offset().top+f.outerHeight())<=Math.round(e.offset().top)),b()},0)}),QUnit.test("should place tooltip inside viewport",function(a){a.expect(1);var b=a.async(),c=$("<div/>").css({position:"absolute",width:200,height:200,bottom:0,left:0}).appendTo("#qunit-fixture");$('<a href="#" title="Very very very very very very very very long tooltip">Hover me</a>').css({position:"absolute",top:0,left:0}).appendTo(c).bootstrapTooltip({placement:"top"}).bootstrapTooltip("show"),setTimeout(function(){a.ok($(".tooltip").offset().left>=0),b()},0)}),QUnit.test("should show tooltip if leave event hasn't occurred before delay expires",function(a){a.expect(2);var b=a.async(),c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({delay:150});setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"100ms: tooltip is not faded in")},100),setTimeout(function(){a.ok($(".tooltip").is(".fade.in"),"200ms: tooltip is faded in"),b()},200),c.trigger("mouseenter")}),QUnit.test("should not show tooltip if leave event occurs before delay expires",function(a){a.expect(2);var b=a.async(),c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({delay:150});setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"100ms: tooltip not faded in"),c.trigger("mouseout")},100),setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"200ms: tooltip not faded in"),b()},200),c.trigger("mouseenter")}),QUnit.test("should not hide tooltip if leave event occurs and enter event occurs within the hide delay",function(a){a.expect(3);var b=a.async(),c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({delay:{show:0,hide:150}});setTimeout(function(){a.ok($(".tooltip").is(".fade.in"),"1ms: tooltip faded in"),c.trigger("mouseout"),setTimeout(function(){a.ok($(".tooltip").is(".fade.in"),"100ms: tooltip still faded in"),c.trigger("mouseenter")},100),setTimeout(function(){a.ok($(".tooltip").is(".fade.in"),"200ms: tooltip still faded in"),b()},200)},0),c.trigger("mouseenter")}),QUnit.test("should not show tooltip if leave event occurs before delay expires",function(a){a.expect(2);var b=a.async(),c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({delay:150});setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"100ms: tooltip not faded in"),c.trigger("mouseout")},100),setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"200ms: tooltip not faded in"),b()},200),c.trigger("mouseenter")}),QUnit.test("should not show tooltip if leave event occurs before delay expires, even if hide delay is 0",function(a){a.expect(2);var b=a.async(),c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({delay:{show:150,hide:0}});setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"100ms: tooltip not faded in"),c.trigger("mouseout")},100),setTimeout(function(){a.ok(!$(".tooltip").is(".fade.in"),"250ms: tooltip not faded in"),b()},250),c.trigger("mouseenter")}),QUnit.test("should wait 200ms before hiding the tooltip",function(a){a.expect(3);var b=a.async(),c=$('<a href="#" rel="tooltip" title="Another tooltip"/>').appendTo("#qunit-fixture").bootstrapTooltip({delay:{show:0,hide:150}});setTimeout(function(){a.ok(c.data("bs.tooltip").$tip.is(".fade.in"),"1ms: tooltip faded in"),c.trigger("mouseout"),setTimeout(function(){a.ok(c.data("bs.tooltip").$tip.is(".fade.in"),"100ms: tooltip still faded in")},100),setTimeout(function(){a.ok(!c.data("bs.tooltip").$tip.is(".in"),"200ms: tooltip removed"),b()},200)},0),c.trigger("mouseenter")}),QUnit.test("should correctly position tooltips on SVG elements",function(a){if(!window.SVGElement)return void a.expect(0);a.expect(2);var b=a.async(),c="<style>.tooltip, .tooltip *, .tooltip *:before, .tooltip *:after { box-sizing: border-box; }.tooltip { position: absolute; }.tooltip .tooltip-inner { width: 24px; height: 24px; font-family: Helvetica; }</style>",d=$(c).appendTo("head");$("#qunit-fixture").append('<div style="position: fixed; top: 0; left: 0;">  <svg width="200" height="200">    <circle cx="100" cy="100" r="10" title="m" id="theCircle" />  </svg></div>');var e=$("#theCircle");e.on("shown.bs.tooltip",function(){var c=$(".tooltip").offset();d.remove(),a.ok(Math.abs(c.left-88)<=1,"tooltip has correct horizontal location"),e.bootstrapTooltip("hide"),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),b()}).bootstrapTooltip({container:"body",placement:"top",trigger:"manual"}),e.bootstrapTooltip("show")}),QUnit.test("should correctly determine auto placement based on container rather than parent",function(a){a.expect(2);var b=a.async(),c="<style>.tooltip, .tooltip *, .tooltip *:before, .tooltip *:after { box-sizing: border-box; }.tooltip { position: absolute; display: block; font-size: 12px; line-height: 1.4; }.tooltip .tooltip-inner { max-width: 200px; padding: 3px 8px; font-family: Helvetica; text-align: center; }#trigger-parent {  position: fixed;  top: 100px;  right: 17px;}</style>",d=$(c).appendTo("head");$("#qunit-fixture").append('<span id="trigger-parent"><a id="tt-trigger" title="If a_larger_text is written here, it won\'t fit using older broken version of BS">HOVER OVER ME</a></span>');var e=$("#tt-trigger");e.on("shown.bs.tooltip",function(){var b=$(".tooltip-inner"),c=b.offset().left+b.width(),d=e.offset().left;a.ok(d>c,"tooltip with auto left placement, when near the right edge of the viewport, gets left placement"),e.bootstrapTooltip("hide")}).on("hidden.bs.tooltip",function(){d.remove(),$(this).remove(),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),b()}).bootstrapTooltip({container:"body",placement:"auto left",trigger:"manual"}),e.bootstrapTooltip("show")}),QUnit.test("should not reload the tooltip on subsequent mouseenter events",function(a){a.expect(1);var b=function(){var a=$.fn.bootstrapTooltip.Constructor.prototype.getUID("tooltip");return'<p id="tt-content">'+a+"</p><p>"+a+"</p><p>"+a+"</p>"},c=$('<span id="tt-outer" rel="tooltip" data-trigger="hover" data-placement="top">some text</span>').appendTo("#qunit-fixture");c.bootstrapTooltip({html:!0,animation:!1,trigger:"hover",delay:{show:0,hide:500},container:c,title:b}),$("#tt-outer").trigger("mouseenter");var d=$("#tt-content").text();$("#tt-content").trigger("mouseenter"),a.strictEqual(d,$("#tt-content").text())}),QUnit.test("should not reload the tooltip if the mouse leaves and re-enters before hiding",function(a){a.expect(4);var b=function(){var a=$.fn.bootstrapTooltip.Constructor.prototype.getUID("tooltip");return'<p id="tt-content">'+a+"</p><p>"+a+"</p><p>"+a+"</p>"},c=$('<span id="tt-outer" rel="tooltip" data-trigger="hover" data-placement="top">some text</span>').appendTo("#qunit-fixture");c.bootstrapTooltip({html:!0,animation:!1,trigger:"hover",delay:{show:0,hide:500},container:c,title:b});var d=c.data("bs.tooltip");$("#tt-outer").trigger("mouseenter");var e=$("#tt-content").text();$("#tt-outer").trigger("mouseleave"),a.strictEqual(e,$("#tt-content").text()),a.ok("out"==d.hoverState,'the tooltip hoverState should be set to "out"'),$("#tt-content").trigger("mouseenter"),a.ok("in"==d.hoverState,'the tooltip hoverState should be set to "in"'),a.strictEqual(e,$("#tt-content").text())}),QUnit.test("should position arrow correctly when tooltip is moved to not appear offscreen",function(a){a.expect(2);var b=a.async(),c="<style>.tooltip, .tooltip *, .tooltip *:before, .tooltip *:after { box-sizing: border-box; }.tooltip { position: absolute; }.tooltip-arrow { position: absolute; width: 0; height: 0; }.tooltip .tooltip-inner { max-width: 200px; padding: 3px 8px; }</style>",d=$(c).appendTo("head");$('<a href="#" title="tooltip title" style="position: absolute; bottom: 0; right: 0;">Foobar</a>').appendTo("body").on("shown.bs.tooltip",function(){var b=$(this).data("bs.tooltip").$tip.find(".tooltip-arrow").attr("style");a.ok(/left/i.test(b)&&!/top/i.test(b),"arrow positioned correctly"),$(this).bootstrapTooltip("hide")}).on("hidden.bs.tooltip",function(){d.remove(),$(this).remove(),a.strictEqual($(".tooltip").length,0,"tooltip removed from dom"),b()}).bootstrapTooltip({container:"body",placement:"top",trigger:"manual"}).bootstrapTooltip("show")}),QUnit.test("should correctly position tooltips on transformed elements",function(a){var b=document.documentElement.style;if(!("transform"in b||"webkitTransform"in b||"msTransform"in b))return void a.expect(0);a.expect(2);var c=a.async(),d="<style>#qunit-fixture { top: 0; left: 0; }.tooltip, .tooltip *, .tooltip *:before, .tooltip *:after { box-sizing: border-box; }.tooltip { position: absolute; }.tooltip .tooltip-inner { width: 24px; height: 24px; font-family: Helvetica; }#target { position: absolute; top: 100px; left: 50px; width: 100px; height: 200px; -webkit-transform: rotate(270deg); -ms-transform: rotate(270deg); transform: rotate(270deg); }</style>",e=$(d).appendTo("head"),f=$('<div id="target" title="1"/>').appendTo("#qunit-fixture");f.on("shown.bs.tooltip",function(){var b=$(".tooltip").offset();e.remove(),a.ok(Math.abs(b.left-88)<=1,"tooltip has correct horizontal location"),a.ok(Math.abs(b.top-126)<=1,"tooltip has correct vertical location"),f.bootstrapTooltip("hide"),c()}).bootstrapTooltip({container:"body",placement:"top",trigger:"manual"}),f.bootstrapTooltip("show")}),QUnit.test("should throw an error when initializing tooltip on the document object without specifying a delegation selector",function(a){a.expect(1),a["throws"](function(){$(document).bootstrapTooltip({title:"What am I on?"})},new Error("`selector` option must be specified when initializing tooltip on the window.document object!"))}),QUnit.test("should do nothing when an attempt is made to hide an uninitialized tooltip",function(a){a.expect(1);var b=$('<span data-toggle="tooltip" title="some tip">some text</span>').appendTo("#qunit-fixture").on("hidden.bs.tooltip shown.bs.tooltip",function(){a.ok(!1,"should not fire any tooltip events")}).bootstrapTooltip("hide");a.strictEqual(b.data("bs.tooltip"),void 0,"should not initialize the tooltip")})}),$(function(){"use strict";QUnit.module("popover plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).popover,"popover method is defined")}),QUnit.module("popover",{beforeEach:function(){$.fn.bootstrapPopover=$.fn.popover.noConflict()},afterEach:function(){$.fn.popover=$.fn.bootstrapPopover,delete $.fn.bootstrapPopover}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.popover,void 0,"popover was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapPopover();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should render popover element",function(a){a.expect(2);var b=$('<a href="#" title="mdo" data-content="https://twitter.com/mdo">@mdo</a>').appendTo("#qunit-fixture").bootstrapPopover("show");a.notEqual($(".popover").length,0,"popover was inserted"),b.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover removed")}),QUnit.test("should store popover instance in popover data object",function(a){a.expect(1);var b=$('<a href="#" title="mdo" data-content="https://twitter.com/mdo">@mdo</a>').bootstrapPopover();a.ok(b.data("bs.popover"),"popover instance exists")}),QUnit.test("should store popover trigger in popover instance data object",function(a){a.expect(1);var b=$('<a href="#" title="ResentedHook">@ResentedHook</a>').appendTo("#qunit-fixture").bootstrapPopover();b.bootstrapPopover("show"),a.ok($(".popover").data("bs.popover"),"popover trigger stored in instance data")}),QUnit.test("should get title and content from options",function(a){a.expect(4);var b=$('<a href="#">@fat</a>').appendTo("#qunit-fixture").bootstrapPopover({title:function(){return"@fat"},content:function(){return"loves writing tests （╯°□°）╯︵ ┻━┻"}});b.bootstrapPopover("show"),a.notEqual($(".popover").length,0,"popover was inserted"),a.strictEqual($(".popover .popover-title").text(),"@fat","title correctly inserted"),a.strictEqual($(".popover .popover-content").text(),"loves writing tests （╯°□°）╯︵ ┻━┻","content correctly inserted"),b.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover was removed")}),QUnit.test("should not duplicate HTML object",function(a){a.expect(6);var b=$("<div/>").html("loves writing tests （╯°□°）╯︵ ┻━┻"),c=$('<a href="#">@fat</a>').appendTo("#qunit-fixture").bootstrapPopover({content:function(){return b}});c.bootstrapPopover("show"),a.notEqual($(".popover").length,0,"popover was inserted"),a.equal($(".popover .popover-content").html(),b,"content correctly inserted"),c.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover was removed"),c.bootstrapPopover("show"),a.notEqual($(".popover").length,0,"popover was inserted"),a.equal($(".popover .popover-content").html(),b,"content correctly inserted"),c.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover was removed")}),QUnit.test("should get title and content from attributes",function(a){a.expect(4);var b=$('<a href="#" title="@mdo" data-content="loves data attributes (づ｡◕‿‿◕｡)づ ︵ ┻━┻" >@mdo</a>').appendTo("#qunit-fixture").bootstrapPopover().bootstrapPopover("show");a.notEqual($(".popover").length,0,"popover was inserted"),a.strictEqual($(".popover .popover-title").text(),"@mdo","title correctly inserted"),a.strictEqual($(".popover .popover-content").text(),"loves data attributes (づ｡◕‿‿◕｡)づ ︵ ┻━┻","content correctly inserted"),b.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover was removed")}),QUnit.test("should get title and content from attributes ignoring options passed via js",function(a){a.expect(4);var b=$('<a href="#" title="@mdo" data-content="loves data attributes (づ｡◕‿‿◕｡)づ ︵ ┻━┻" >@mdo</a>').appendTo("#qunit-fixture").bootstrapPopover({title:"ignored title option",content:"ignored content option"}).bootstrapPopover("show");a.notEqual($(".popover").length,0,"popover was inserted"),a.strictEqual($(".popover .popover-title").text(),"@mdo","title correctly inserted"),a.strictEqual($(".popover .popover-content").text(),"loves data attributes (づ｡◕‿‿◕｡)づ ︵ ┻━┻","content correctly inserted"),b.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover was removed")}),QUnit.test("should respect custom template",function(a){a.expect(3);var b=$('<a href="#">@fat</a>').appendTo("#qunit-fixture").bootstrapPopover({title:"Test",content:"Test",template:'<div class="popover foobar"><div class="arrow"></div><div class="inner"><h3 class="title"/><div class="content"><p/></div></div></div>'});b.bootstrapPopover("show"),a.notEqual($(".popover").length,0,"popover was inserted"),a.ok($(".popover").hasClass("foobar"),"custom class is present"),b.bootstrapPopover("hide"),a.strictEqual($(".popover").length,0,"popover was removed")}),QUnit.test("should destroy popover",function(a){a.expect(7);var b=$("<div/>").bootstrapPopover({trigger:"hover"}).on("click.foo",$.noop);a.ok(b.data("bs.popover"),"popover has data"),a.ok($._data(b[0],"events").mouseover&&$._data(b[0],"events").mouseout,"popover has hover event"),a.strictEqual($._data(b[0],"events").click[0].namespace,"foo","popover has extra click.foo event"),b.bootstrapPopover("show"),
b.bootstrapPopover("destroy"),a.ok(!b.hasClass("in"),"popover is hidden"),a.ok(!b.data("popover"),"popover does not have data"),a.strictEqual($._data(b[0],"events").click[0].namespace,"foo","popover still has click.foo"),a.ok(!$._data(b[0],"events").mouseover&&!$._data(b[0],"events").mouseout,"popover does not have any events")}),QUnit.test("should render popover element using delegated selector",function(a){a.expect(2);var b=$('<div><a href="#" title="mdo" data-content="http://twitter.com/mdo">@mdo</a></div>').appendTo("#qunit-fixture").bootstrapPopover({selector:"a",trigger:"click"});b.find("a").trigger("click"),a.notEqual($(".popover").length,0,"popover was inserted"),b.find("a").trigger("click"),a.strictEqual($(".popover").length,0,"popover was removed")}),QUnit.test("should detach popover content rather than removing it so that event handlers are left intact",function(a){a.expect(1);var b=$('<div class="content-with-handler"><a class="btn btn-warning">Button with event handler</a></div>').appendTo("#qunit-fixture"),c=!1;$(".content-with-handler .btn").on("click",function(){c=!0});var d=$('<div><a href="#">Show popover</a></div>').appendTo("#qunit-fixture").bootstrapPopover({html:!0,trigger:"manual",container:"body",content:function(){return b}}),e=a.async();d.one("shown.bs.popover",function(){d.one("hidden.bs.popover",function(){d.one("shown.bs.popover",function(){$(".content-with-handler .btn").trigger("click"),d.bootstrapPopover("destroy"),a.ok(c,"content's event handler still present"),e()}).bootstrapPopover("show")}).bootstrapPopover("hide")}).bootstrapPopover("show")}),QUnit.test("should throw an error when initializing popover on the document object without specifying a delegation selector",function(a){a.expect(1),a["throws"](function(){$(document).bootstrapPopover({title:"What am I on?",content:"My selector is missing"})},new Error("`selector` option must be specified when initializing popover on the window.document object!"))}),QUnit.test("should do nothing when an attempt is made to hide an uninitialized popover",function(a){a.expect(1);var b=$('<span data-toggle="popover" data-title="some title" data-content="some content">some text</span>').appendTo("#qunit-fixture").on("hidden.bs.popover shown.bs.popover",function(){a.ok(!1,"should not fire any popover events")}).bootstrapPopover("hide");a.strictEqual(b.data("bs.popover"),void 0,"should not initialize the popover")})}),$(function(){"use strict";QUnit.module("scrollspy plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).scrollspy,"scrollspy method is defined")}),QUnit.module("scrollspy",{beforeEach:function(){$.fn.bootstrapScrollspy=$.fn.scrollspy.noConflict()},afterEach:function(){$.fn.scrollspy=$.fn.bootstrapScrollspy,delete $.fn.bootstrapScrollspy}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.scrollspy,void 0,"scrollspy was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapScrollspy();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test('should only switch "active" class on current target',function(a){a.expect(1);var b=a.async(),c='<div id="root" class="active"><div class="topbar"><div class="topbar-inner"><div class="container" id="ss-target"><ul class="nav"><li><a href="#masthead">Overview</a></li><li><a href="#detail">Detail</a></li></ul></div></div></div><div id="scrollspy-example" style="height: 100px; overflow: auto;"><div style="height: 200px;"><h4 id="masthead">Overview</h4><p style="height: 200px">Ad leggings keytar, brunch id art party dolor labore.</p></div><div style="height: 200px;"><h4 id="detail">Detail</h4><p style="height: 200px">Veniam marfa mustache skateboard, adipisicing fugiat velit pitchfork beard.</p></div></div></div>',d=$(c).appendTo("#qunit-fixture"),e=d.show().find("#scrollspy-example").bootstrapScrollspy({target:"#ss-target"});e.on("scroll.bs.scrollspy",function(){a.ok(d.hasClass("active"),'"active" class still on root node'),b()}),e.scrollTop(350)}),QUnit.test("should correctly select middle navigation option when large offset is used",function(a){a.expect(3);var b=a.async(),c='<div id="header" style="height: 500px;"></div><nav id="navigation" class="navbar"><ul class="nav navbar-nav"><li class="active"><a id="one-link" href="#one">One</a></li><li><a id="two-link" href="#two">Two</a></li><li><a id="three-link" href="#three">Three</a></li></ul></nav><div id="content" style="height: 200px; overflow-y: auto;"><div id="one" style="height: 500px;"></div><div id="two" style="height: 300px;"></div><div id="three" style="height: 10px;"></div></div>',d=$(c).appendTo("#qunit-fixture"),e=d.show().filter("#content");e.bootstrapScrollspy({target:"#navigation",offset:e.position().top}),e.on("scroll.bs.scrollspy",function(){a.ok(!d.find("#one-link").parent().hasClass("active"),'"active" class removed from first section'),a.ok(d.find("#two-link").parent().hasClass("active"),'"active" class on middle section'),a.ok(!d.find("#three-link").parent().hasClass("active"),'"active" class not on last section'),b()}),e.scrollTop(550)}),QUnit.test("should add the active class to the correct element",function(a){a.expect(2);var b='<nav class="navbar"><ul class="nav"><li id="li-1"><a href="#div-1">div 1</a></li><li id="li-2"><a href="#div-2">div 2</a></li></ul></nav>',c='<div class="content" style="overflow: auto; height: 50px"><div id="div-1" style="height: 100px; padding: 0; margin: 0">div 1</div><div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div></div>';$(b).appendTo("#qunit-fixture");var d=$(c).appendTo("#qunit-fixture").bootstrapScrollspy({offset:0,target:".navbar"}),e=function(b,c){var e=$.Deferred(),f=Math.ceil(d.scrollTop()+$(c).position().top),g=a.async();return d.one("scroll",function(){a.ok($(b).hasClass("active"),"target:"+c+", element"+b),g(),e.resolve()}),d.scrollTop(f),e.promise()};$.when(e("#li-1","#div-1")).then(function(){return e("#li-2","#div-2")})}),QUnit.test("should add the active class correctly when there are nested elements at 0 scroll offset",function(a){a.expect(6);var b=0,c=a.async(),d='<nav id="navigation" class="navbar"><ul class="nav"><li id="li-1"><a href="#div-1">div 1</a><ul><li id="li-2"><a href="#div-2">div 2</a></li></ul></li></ul></nav>',e='<div class="content" style="position: absolute; top: 0px; overflow: auto; height: 50px"><div id="div-1" style="padding: 0; margin: 0"><div id="div-2" style="height: 200px; padding: 0; margin: 0">div 2</div></div></div>';$(d).appendTo("#qunit-fixture");var f=$(e).appendTo("#qunit-fixture").bootstrapScrollspy({offset:0,target:"#navigation"});!function g(){return++b>3?c():(f.one("scroll",function(){a.ok($("#li-1").hasClass("active"),'nav item for outer element has "active" class'),a.ok($("#li-2").hasClass("active"),'nav item for inner element has "active" class'),g()}),void f.scrollTop(f.scrollTop()+10))}()}),QUnit.test("should clear selection if above the first section",function(a){a.expect(3);var b=a.async(),c='<div id="header" style="height: 500px;"></div><nav id="navigation" class="navbar"><ul class="nav navbar-nav"><li class="active"><a id="one-link" href="#one">One</a></li><li><a id="two-link" href="#two">Two</a></li><li><a id="three-link" href="#three">Three</a></li></ul></nav>';$(c).appendTo("#qunit-fixture");var d='<div id="content" style="height: 200px; overflow-y: auto;"><div id="spacer" style="height: 100px;"/><div id="one" style="height: 100px;"/><div id="two" style="height: 100px;"/><div id="three" style="height: 100px;"/><div id="spacer" style="height: 100px;"/></div>',e=$(d).appendTo("#qunit-fixture");e.bootstrapScrollspy({target:"#navigation",offset:e.position().top}).one("scroll.bs.scrollspy",function(){a.strictEqual($(".active").length,1,'"active" class on only one element present'),a.strictEqual($(".active").has("#two-link").length,1,'"active" class on second section'),e.one("scroll.bs.scrollspy",function(){a.strictEqual($(".active").length,0,"selection cleared"),b()}).scrollTop(0)}).scrollTop(201)}),QUnit.test("should correctly select navigation element on backward scrolling when each target section height is 100%",function(a){a.expect(5);var b='<nav class="navbar"><ul class="nav"><li id="li-100-1"><a href="#div-100-1">div 1</a></li><li id="li-100-2"><a href="#div-100-2">div 2</a></li><li id="li-100-3"><a href="#div-100-3">div 3</a></li><li id="li-100-4"><a href="#div-100-4">div 4</a></li><li id="li-100-5"><a href="#div-100-5">div 5</a></li></ul></nav>',c='<div class="content" style="position: relative; overflow: auto; height: 100px"><div id="div-100-1" style="position: relative; height: 100%; padding: 0; margin: 0">div 1</div><div id="div-100-2" style="position: relative; height: 100%; padding: 0; margin: 0">div 2</div><div id="div-100-3" style="position: relative; height: 100%; padding: 0; margin: 0">div 3</div><div id="div-100-4" style="position: relative; height: 100%; padding: 0; margin: 0">div 4</div><div id="div-100-5" style="position: relative; height: 100%; padding: 0; margin: 0">div 5</div></div>';$(b).appendTo("#qunit-fixture");var d=$(c).appendTo("#qunit-fixture").bootstrapScrollspy({offset:0,target:".navbar"}),e=function(b,c){var e=$.Deferred(),f=Math.ceil(d.scrollTop()+$(c).position().top),g=a.async();return d.one("scroll",function(){a.ok($(b).hasClass("active"),"target:"+c+", element: "+b),g(),e.resolve()}),d.scrollTop(f),e.promise()};$.when(e("#li-100-5","#div-100-5")).then(function(){return e("#li-100-4","#div-100-4")}).then(function(){return e("#li-100-3","#div-100-3")}).then(function(){return e("#li-100-2","#div-100-2")}).then(function(){return e("#li-100-1","#div-100-1")})})}),$(function(){"use strict";QUnit.module("tabs plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).tab,"tabs method is defined")}),QUnit.module("tabs",{beforeEach:function(){$.fn.bootstrapTab=$.fn.tab.noConflict()},afterEach:function(){$.fn.tab=$.fn.bootstrapTab,delete $.fn.bootstrapTab}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.tab,void 0,"tab was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapTab();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should activate element by tab id",function(a){a.expect(2);var b='<ul class="tabs"><li><a href="#home">Home</a></li><li><a href="#profile">Profile</a></li></ul>';$('<ul><li id="home"/><li id="profile"/></ul>').appendTo("#qunit-fixture"),$(b).find("li:last a").bootstrapTab("show"),a.strictEqual($("#qunit-fixture").find(".active").attr("id"),"profile"),$(b).find("li:first a").bootstrapTab("show"),a.strictEqual($("#qunit-fixture").find(".active").attr("id"),"home")}),QUnit.test("should activate element by tab id",function(a){a.expect(2);var b='<ul class="pills"><li><a href="#home">Home</a></li><li><a href="#profile">Profile</a></li></ul>';$('<ul><li id="home"/><li id="profile"/></ul>').appendTo("#qunit-fixture"),$(b).find("li:last a").bootstrapTab("show"),a.strictEqual($("#qunit-fixture").find(".active").attr("id"),"profile"),$(b).find("li:first a").bootstrapTab("show"),a.strictEqual($("#qunit-fixture").find(".active").attr("id"),"home")}),QUnit.test("should not fire shown when show is prevented",function(a){a.expect(1);var b=a.async();$('<div class="tab"/>').on("show.bs.tab",function(c){c.preventDefault(),a.ok(!0,"show event fired"),b()}).on("shown.bs.tab",function(){a.ok(!1,"shown event fired")}).bootstrapTab("show")}),QUnit.test("show and shown events should reference correct relatedTarget",function(a){a.expect(2);var b=a.async(),c='<ul class="drop"><li class="dropdown"><a data-toggle="dropdown" href="#">1</a><ul class="dropdown-menu"><li><a href="#1-1" data-toggle="tab">1-1</a></li><li><a href="#1-2" data-toggle="tab">1-2</a></li></ul></li></ul>';$(c).find("ul > li:first a").bootstrapTab("show").end().find("ul > li:last a").on("show.bs.tab",function(b){a.strictEqual(b.relatedTarget.hash,"#1-1","references correct element as relatedTarget")}).on("shown.bs.tab",function(c){a.strictEqual(c.relatedTarget.hash,"#1-1","references correct element as relatedTarget"),b()}).bootstrapTab("show")}),QUnit.test("should fire hide and hidden events",function(a){a.expect(2);var b=a.async(),c='<ul class="tabs"><li><a href="#home">Home</a></li><li><a href="#profile">Profile</a></li></ul>';$(c).find("li:first a").on("hide.bs.tab",function(){a.ok(!0,"hide event fired")}).bootstrapTab("show").end().find("li:last a").bootstrapTab("show"),$(c).find("li:first a").on("hidden.bs.tab",function(){a.ok(!0,"hidden event fired"),b()}).bootstrapTab("show").end().find("li:last a").bootstrapTab("show")}),QUnit.test("should not fire hidden when hide is prevented",function(a){a.expect(1);var b=a.async(),c='<ul class="tabs"><li><a href="#home">Home</a></li><li><a href="#profile">Profile</a></li></ul>';$(c).find("li:first a").on("hide.bs.tab",function(c){c.preventDefault(),a.ok(!0,"hide event fired"),b()}).on("hidden.bs.tab",function(){a.ok(!1,"hidden event fired")}).bootstrapTab("show").end().find("li:last a").bootstrapTab("show")}),QUnit.test("hide and hidden events contain correct relatedTarget",function(a){a.expect(2);var b=a.async(),c='<ul class="tabs"><li><a href="#home">Home</a></li><li><a href="#profile">Profile</a></li></ul>';$(c).find("li:first a").on("hide.bs.tab",function(b){a.strictEqual(b.relatedTarget.hash,"#profile","references correct element as relatedTarget")}).on("hidden.bs.tab",function(c){a.strictEqual(c.relatedTarget.hash,"#profile","references correct element as relatedTarget"),b()}).bootstrapTab("show").end().find("li:last a").bootstrapTab("show")}),QUnit.test("selected tab should have aria-expanded",function(a){a.expect(8);var b='<ul class="nav nav-tabs"><li class="active"><a href="#home" toggle="tab" aria-expanded="true">Home</a></li><li><a href="#profile" toggle="tab" aria-expanded="false">Profile</a></li></ul>',c=$(b).appendTo("#qunit-fixture");c.find("li:first a").bootstrapTab("show"),a.strictEqual(c.find(".active a").attr("aria-expanded"),"true","shown tab has aria-expanded = true"),a.strictEqual(c.find("li:not(.active) a").attr("aria-expanded"),"false","hidden tab has aria-expanded = false"),c.find("li:last a").trigger("click"),a.strictEqual(c.find(".active a").attr("aria-expanded"),"true","after click, shown tab has aria-expanded = true"),a.strictEqual(c.find("li:not(.active) a").attr("aria-expanded"),"false","after click, hidden tab has aria-expanded = false"),c.find("li:first a").bootstrapTab("show"),a.strictEqual(c.find(".active a").attr("aria-expanded"),"true","shown tab has aria-expanded = true"),a.strictEqual(c.find("li:not(.active) a").attr("aria-expanded"),"false","hidden tab has aria-expanded = false"),c.find("li:first a").trigger("click"),a.strictEqual(c.find(".active a").attr("aria-expanded"),"true","after second show event, shown tab still has aria-expanded = true"),a.strictEqual(c.find("li:not(.active) a").attr("aria-expanded"),"false","after second show event, hidden tab has aria-expanded = false")})}),$(function(){"use strict";QUnit.module("affix plugin"),QUnit.test("should be defined on jquery object",function(a){a.expect(1),a.ok($(document.body).affix,"affix method is defined")}),QUnit.module("affix",{beforeEach:function(){$.fn.bootstrapAffix=$.fn.affix.noConflict()},afterEach:function(){$.fn.affix=$.fn.bootstrapAffix,delete $.fn.bootstrapAffix}}),QUnit.test("should provide no conflict",function(a){a.expect(1),a.strictEqual($.fn.affix,void 0,"affix was set back to undefined (org value)")}),QUnit.test("should return jquery collection containing the element",function(a){a.expect(2);var b=$("<div/>"),c=b.bootstrapAffix();a.ok(c instanceof $,"returns jquery collection"),a.strictEqual(c[0],b[0],"collection contains element")}),QUnit.test("should exit early if element is not visible",function(a){a.expect(1);var b=$('<div style="display: none"/>').bootstrapAffix();b.data("bs.affix").checkPosition(),a.ok(!b.hasClass("affix"),"affix class was not added")}),QUnit.test("should trigger affixed event after affix",function(a){a.expect(2);var b=a.async(),c='<div id="affixTarget"><ul><li>Please affix</li><li>And unaffix</li></ul></div><div id="affixAfter" style="height: 20000px; display: block;"/>';$(c).appendTo(document.body),$("#affixTarget").bootstrapAffix({offset:$("#affixTarget ul").position()}),$("#affixTarget").on("affix.bs.affix",function(){a.ok(!0,"affix event fired")}).on("affixed.bs.affix",function(){a.ok(!0,"affixed event fired"),$("#affixTarget, #affixAfter").remove(),b()}),setTimeout(function(){window.scrollTo(0,document.body.scrollHeight),setTimeout(function(){window.scroll(0,0)},16)},0)}),QUnit.test("should affix-top when scrolling up to offset when parent has padding",function(a){a.expect(1);var b=a.async(),c='<div id="padding-offset" style="padding-top: 20px;"><div id="affixTopTarget"><p>Testing affix-top class is added</p></div><div style="height: 1000px; display: block;"/></div>';$(c).appendTo(document.body),$("#affixTopTarget").bootstrapAffix({offset:{top:120,bottom:0}}).on("affixed-top.bs.affix",function(){a.ok($("#affixTopTarget").hasClass("affix-top"),"affix-top class applied"),$("#padding-offset").remove(),b()}),setTimeout(function(){window.scrollTo(0,document.body.scrollHeight),setTimeout(function(){window.scroll(0,119)},250)},250)})});